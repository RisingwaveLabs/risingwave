version: "3.9"
services:
  db:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2

  # kafka:
  #   image: confluentinc/cp-kafka
  #   ports:
  #     - 29092:29092
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:29092
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://${HOST_IP}:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #   healthcheck:
  #     test: nc -z ${HOST_IP} 29092 || exit -1
  #     interval: 5s
  #     timeout: 10s
  #     retries: 5

  rw-build-env:
    image: public.ecr.aws/x5u3w5h6/rw-build-env:v20220826
    volumes:
      - ..:/risingwave

  regress-test-env:
    image: public.ecr.aws/x5u3w5h6/rw-build-env:v20220826
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ..:/risingwave

  benchmark-env:
    image: public.ecr.aws/x5u3w5h6/rw-build-env:v20220729
    depends_on:
      - kafka
    volumes:
      - ..:/risingwave

  postgres:
    image: debezium/postgres:13
    ports:
      - 25432:5432
    healthcheck:
      test: "pg_isready -U user -d ch_benchmark_db"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pw
      - POSTGRES_DB=ch_benchmark_db
      - PGPASSWORD=pw
    volumes:
      - ./init:/docker-entrypoint-initdb.d

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.5.3
    depends_on: [zookeeper]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9991
    ports:
    - 29092:29092 
    healthcheck:
      test: nc -z ${HOST_IP} 29092 || exit -1
      interval: 5s
      timeout: 10s
      retries: 5

  debezium:
    image: debezium/connect:1.4
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 2
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on: [kafka]
    ports:
      - 8083:8083
    volumes:
      - ./connectors:/connectors
      
  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.3
    environment:
     - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
     - SCHEMA_REGISTRY_HOST_NAME=schema-registry
     - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    depends_on: [zookeeper, kafka]
