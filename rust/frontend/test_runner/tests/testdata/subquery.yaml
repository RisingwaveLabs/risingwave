- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from (select * from t) where v2 > 1;
  logical_plan: |
    LogicalProject { exprs: [$1], expr_alias: [v1] }
      LogicalFilter { predicate: ($2 > 1:Int32) }
        LogicalProject { exprs: [$0, $1, $2], expr_alias: [_row_id, v1, v2] }
          LogicalScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from (select v2, v1 as v3 from t) where v2 > 1;
  binder_error: 'Item not found: Invalid column: v1'
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v3 from (select v2, v1 as v3 from t) where v2 > 1;
  logical_plan: |
    LogicalProject { exprs: [$1], expr_alias: [v3] }
      LogicalFilter { predicate: ($0 > 1:Int32) }
        LogicalProject { exprs: [$2, $1], expr_alias: [v2, v3] }
          LogicalScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    /* consecutive projects are merged */
    create table t (v1 bigint, v2 double precision);
    select v1, 2 from (select v1, v2, 1 from t);
  logical_plan: |
    LogicalProject { exprs: [$0, 2:Int32], expr_alias: [v1,  ] }
      LogicalProject { exprs: [$1, $2, 1:Int32], expr_alias: [v1, v2,  ] }
        LogicalScan { table: t, columns: [_row_id, v1, v2] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0, 2:Int32], expr_alias: [v1,  ] }
      LogicalScan { table: t, columns: [v1] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t);
  logical_plan: |
    LogicalProject { exprs: [$0, $1, $2], expr_alias: [_row_id, v1, v2] }
      LogicalProject { exprs: [$0, $1, $2], expr_alias: [_row_id, v1, v2] }
        LogicalScan { table: t, columns: [_row_id, v1, v2] }
  optimized_logical_plan: |
    LogicalScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    /* joins */
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t), t;
  logical_plan: |
    LogicalProject { exprs: [$0, $1, $2, $3, $4, $5], expr_alias: [_row_id, v1, v2, _row_id, v1, v2] }
      LogicalJoin { type: Inner, on: true:Boolean }
        LogicalProject { exprs: [$0, $1, $2], expr_alias: [_row_id, v1, v2] }
          LogicalScan { table: t, columns: [_row_id, v1, v2] }
        LogicalScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    /* table alias not supported yet */
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t) as tt join t on tt.v1=t.v1;
  binder_error: 'Item not found: missing FROM-clause entry for table "tt"'
