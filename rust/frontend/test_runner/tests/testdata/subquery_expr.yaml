- sql: |
    select (select 1);
  logical_plan: |
    LogicalProject { exprs: [$0], expr_alias: [ ] }
      LogicalApply { type: LeftOuter }
        LogicalValues { rows: [[]], schema: Schema { fields: [] } }
        LogicalProject { exprs: [1:Int32], expr_alias: [ ] }
          LogicalValues { rows: [[]], schema: Schema { fields: [] } }
- sql: |
    create table t(x int);
    select (select x from t), 1 from t;
  logical_plan: |
    LogicalProject { exprs: [$2, 1:Int32], expr_alias: [ ,  ] }
      LogicalApply { type: LeftOuter }
        LogicalScan { table: t, columns: [_row_id, x] }
        LogicalProject { exprs: [$1], expr_alias: [x] }
          LogicalScan { table: t, columns: [_row_id, x] }
- sql: |
    create table t(x int);
    select (select x from t) + 1 from t;
  logical_plan: |
    LogicalProject { exprs: [($2 + 1:Int32)], expr_alias: [ ] }
      LogicalApply { type: LeftOuter }
        LogicalScan { table: t, columns: [_row_id, x] }
        LogicalProject { exprs: [$1], expr_alias: [x] }
          LogicalScan { table: t, columns: [_row_id, x] }
- sql: |
    create table t(x int);
    select (select x from t), (select 1);
  logical_plan: |
    LogicalProject { exprs: [$0, $1], expr_alias: [ ,  ] }
      LogicalApply { type: LeftOuter }
        LogicalApply { type: LeftOuter }
          LogicalValues { rows: [[]], schema: Schema { fields: [] } }
          LogicalProject { exprs: [$1], expr_alias: [x] }
            LogicalScan { table: t, columns: [_row_id, x] }
        LogicalProject { exprs: [1:Int32], expr_alias: [ ] }
          LogicalValues { rows: [[]], schema: Schema { fields: [] } }
- sql: |
    create table t(x int);
    select x + (select x + (select x as v1 from t) as v2 from t) as v3 from t;
  logical_plan: |
    LogicalProject { exprs: [($1 + $2)], expr_alias: [v3] }
      LogicalApply { type: LeftOuter }
        LogicalScan { table: t, columns: [_row_id, x] }
        LogicalProject { exprs: [($1 + $2)], expr_alias: [v2] }
          LogicalApply { type: LeftOuter }
            LogicalScan { table: t, columns: [_row_id, x] }
            LogicalProject { exprs: [$1], expr_alias: [v1] }
              LogicalScan { table: t, columns: [_row_id, x] }
- sql: |
    select (select 1, 2);
  binder_error: 'Bind error: subquery must return only one column'
- sql: |
    create table t(x int);
    select 1 where exists (select * from t);
  logical_plan: |
    LogicalProject { exprs: [1:Int32], expr_alias: [ ] }
      LogicalFilter { predicate: $0 }
        LogicalApply { type: LeftOuter }
          LogicalValues { rows: [[]], schema: Schema { fields: [] } }
          LogicalProject { exprs: [($0 >= 1:Int32)], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [count] }
              LogicalProject { exprs: [$0, $1], expr_alias: [_row_id, x] }
                LogicalScan { table: t, columns: [_row_id, x] }
- sql: |
    create table t1(x int);
    create table t2(x int);
    select x from t1 where exists (select x from t2);
  logical_plan: |
    LogicalProject { exprs: [$1], expr_alias: [x] }
      LogicalFilter { predicate: $2 }
        LogicalApply { type: LeftOuter }
          LogicalScan { table: t1, columns: [_row_id, x] }
          LogicalProject { exprs: [($0 >= 1:Int32)], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [count] }
              LogicalProject { exprs: [$1], expr_alias: [x] }
                LogicalScan { table: t2, columns: [_row_id, x] }
- sql: |
    create table t(x int);
    select x from t where exists (select * from t);
  logical_plan: |
    LogicalProject { exprs: [$1], expr_alias: [x] }
      LogicalFilter { predicate: $2 }
        LogicalApply { type: LeftOuter }
          LogicalScan { table: t, columns: [_row_id, x] }
          LogicalProject { exprs: [($0 >= 1:Int32)], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [count] }
              LogicalProject { exprs: [$0, $1], expr_alias: [_row_id, x] }
                LogicalScan { table: t, columns: [_row_id, x] }
