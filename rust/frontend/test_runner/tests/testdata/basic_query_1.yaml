- sql: values (11, 22), (33+(1+2), 44);
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchValues { rows: [[11:Int32, 22:Int32], [(33:Int32 + (1:Int32 + 2:Int32)), 44:Int32]] }
- sql: select * from t
  binder_error: 'Item not found: relation "t"'
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [$0, $1, $2], expr_alias: [_row_id, v1, v2] }
        BatchScan { table: t, columns: [_row_id, v1, v2] }
  stream_plan: |
    StreamMaterialize { table_id: 0, column_order: [], column_id: [#0, #1, #2] }
      StreamProject { exprs: [$0, $1, $2], expr_alias: [_row_id, v1, v2] }
        StreamExchange { dist: Single }
          StreamTableScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select t2.* from t;
  binder_error: 'Item not found: relation "t2"'
- sql: |
    create table t ();
    select * from t where 1>2 and 1=1 and 3<1 and 4<>1 or 1=1 and 2>=1 and 1<=2;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [$0], expr_alias: [_row_id] }
        BatchFilter { predicate: (((((1:Int32 > 2:Int32) AND (1:Int32 = 1:Int32)) AND (3:Int32 < 1:Int32)) AND (4:Int32 <> 1:Int32)) OR (((1:Int32 = 1:Int32) AND (2:Int32 >= 1:Int32)) AND (1:Int32 <= 2:Int32))) }
          BatchScan { table: t, columns: [_row_id] }
  stream_plan: |
    StreamMaterialize { table_id: 0, column_order: [], column_id: [#0] }
      StreamProject { exprs: [$0], expr_alias: [_row_id] }
        StreamExchange { dist: Single }
          StreamFilter { predicate: (((((1:Int32 > 2:Int32) AND (1:Int32 = 1:Int32)) AND (3:Int32 < 1:Int32)) AND (4:Int32 <> 1:Int32)) OR (((1:Int32 = 1:Int32) AND (2:Int32 >= 1:Int32)) AND (1:Int32 <= 2:Int32))) }
            StreamTableScan { table: t, columns: [_row_id] }
- sql: |
    create table t (v1 int);
    select * from t where v1<1;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [$0, $1], expr_alias: [_row_id, v1] }
        BatchFilter { predicate: ($1 < 1:Int32) }
          BatchScan { table: t, columns: [_row_id, v1] }
  stream_plan: |
    StreamMaterialize { table_id: 0, column_order: [], column_id: [#0, #1] }
      StreamProject { exprs: [$0, $1], expr_alias: [_row_id, v1] }
        StreamExchange { dist: Single }
          StreamFilter { predicate: ($1 < 1:Int32) }
            StreamTableScan { table: t, columns: [_row_id, v1] }
- sql: |
    create table t ();
    select (((((false is not true) is true) is not false) is false) is not null) is null from t;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [IsNull(IsNotNull(IsFalse(IsNotFalse(IsTrue(IsNotTrue(false:Boolean))))))], expr_alias: [ ] }
        BatchScan { table: t, columns: [] }
- sql: |
    create table t (v1 int);
    select (case when v1=1 then 1 when v1=2 then 2 else 0.0 end) from t;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [Case(($0 = 1:Int32), 1:Int32::Decimal, ($0 = 2:Int32), 2:Int32::Decimal, Normalized(0.0):Decimal)], expr_alias: [ ] }
        BatchScan { table: t, columns: [v1] }
  stream_plan: |
    StreamMaterialize { table_id: 0, column_order: [], column_id: [#0] }
      StreamProject { exprs: [Case(($0 = 1:Int32), 1:Int32::Decimal, ($0 = 2:Int32), 2:Int32::Decimal, Normalized(0.0):Decimal)], expr_alias: [ ] }
        StreamExchange { dist: Single }
          StreamTableScan { table: t, columns: [v1] }
- sql: |
    select length(trim(trailing '1' from '12'))+length(trim(leading '2' from '23'))+length(trim(both '3' from '34'));
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [((Length(Rtrim("12":Varchar, "1":Varchar)) + Length(Ltrim("23":Varchar, "2":Varchar))) + Length(Trim("34":Varchar, "3":Varchar)))], expr_alias: [ ] }
        BatchValues { rows: [[]] }
- sql: |
    select position(replace('1','1','2'),'123') where '12' like '%1';
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [Position(Replace("1":Varchar, "1":Varchar, "2":Varchar), "123":Varchar)], expr_alias: [ ] }
        BatchFilter { predicate: Like("12":Varchar, "%1":Varchar) }
          BatchValues { rows: [[]] }
- sql: |
    create table t (v1 int, v2 int);
    insert into t values (22, 33), (44, 55);
  batch_plan: |
    BatchInsert { table_name: "t", columns: [] }
      BatchValues { rows: [[22:Int32, 33:Int32], [44:Int32, 55:Int32]] }
- sql: |
    create table t (v1 int, v2 int);
    delete from t where v1 = 1;
  batch_plan: |
    BatchDelete { table_name: "t" }
      BatchFilter { predicate: ($1 = 1:Int32) }
        BatchScan { table: t, columns: [_row_id, v1, v2] }
