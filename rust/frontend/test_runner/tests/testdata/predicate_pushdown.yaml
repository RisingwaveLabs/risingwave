- sql: |
    create table t1 (v1 int, v2 int, v3 int);
    create table t2 (v1 int, v2 int, v3 int);
    select * from t1 join t2 on t1.v1=t2.v2 and t1.v1>1 where t2.v2>2;
  logical_plan: |
    LogicalFilter { predicate: ($6 > 2:Int32) }
      LogicalJoin { type: Inner, on: ($1 = $6) AND ($1 > 1:Int32) }
        LogicalScan { table: t1, columns: [_row_id, v1, v2, v3] }
        LogicalScan { table: t2, columns: [_row_id, v1, v2, v3] }
  optimized_logical_plan: |
    LogicalJoin { type: Inner, on: ($1 = $6) }
      LogicalFilter { predicate: ($1 > 1:Int32) }
        LogicalScan { table: t1, columns: [_row_id, v1, v2, v3] }
      LogicalFilter { predicate: ($2 > 2:Int32) }
        LogicalScan { table: t2, columns: [_row_id, v1, v2, v3] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t) where v2 > 1;
  logical_plan: |
    LogicalFilter { predicate: ($2 > 1:Int32) }
      LogicalScan { table: t, columns: [_row_id, v1, v2] }
  optimized_logical_plan: |
    LogicalFilter { predicate: ($2 > 1:Int32) }
      LogicalScan { table: t, columns: [_row_id, v1, v2] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from (select v2, v1 from t) where v2 > 1;
  logical_plan: |
    LogicalProject { exprs: [$1], expr_alias: [v1] }
      LogicalFilter { predicate: ($0 > 1:Int32) }
        LogicalProject { exprs: [$2, $1], expr_alias: [v2, v1] }
          LogicalScan { table: t, columns: [_row_id, v1, v2] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0], expr_alias: [v1] }
      LogicalFilter { predicate: ($1 > 1:Int32) }
        LogicalScan { table: t, columns: [v1, v2] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from (select v2 as a2, v1 from t where v1 > 2) where a2 > 1;
  logical_plan: |
    LogicalProject { exprs: [$1], expr_alias: [v1] }
      LogicalFilter { predicate: ($0 > 1:Int32) }
        LogicalProject { exprs: [$2, $1], expr_alias: [a2, v1] }
          LogicalFilter { predicate: ($1 > 2:Int32) }
            LogicalScan { table: t, columns: [_row_id, v1, v2] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0], expr_alias: [v1] }
      LogicalFilter { predicate: ($1 > 1:Int32) }
        LogicalFilter { predicate: ($0 > 2:Int32) }
          LogicalScan { table: t, columns: [v1, v2] }
- sql: |
    create table t(v1 int, v2 int, v3 int, v4 int); 
    select * from (select v1, min(v2) as min from t group by v1) where v1 > 1 and min > 1 and 1 > 0 and v1 > min;
  logical_plan: |
    LogicalProject { exprs: [$0, $1], expr_alias: [v1, min] }
      LogicalFilter { predicate: ($0 > 1:Int32) AND ($1 > 1:Int32) AND (1:Int32 > 0:Int32) AND ($0 > $1) }
        LogicalProject { exprs: [$0, $1], expr_alias: [v1, min] }
          LogicalAgg { group_keys: [0], agg_calls: [min($1)] }
            LogicalProject { exprs: [$1, $2], expr_alias: [ ,  ] }
              LogicalScan { table: t, columns: [_row_id, v1, v2, v3, v4] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0, $1], expr_alias: [v1, min] }
      LogicalFilter { predicate: ($1 > 1:Int32) AND ($0 > $1) }
        LogicalAgg { group_keys: [0], agg_calls: [min($1)] }
          LogicalProject { exprs: [$0, $1], expr_alias: [ ,  ] }
            LogicalFilter { predicate: ($0 > 1:Int32) AND (1:Int32 > 0:Int32) }
              LogicalScan { table: t, columns: [v1, v2] }
