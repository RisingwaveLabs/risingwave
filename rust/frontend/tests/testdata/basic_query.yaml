- sql: values (11, 22), (33+(1+2), 44);
  plan: |
    LogicalValues { rows: [[Literal(Literal { data: Some(Int32(11)), data_type: Int32 }), Literal(Literal { data: Some(Int32(22)), data_type: Int32 })], [FunctionCall(FunctionCall { func_type: Add, return_type: Int32, inputs: [Literal(Literal { data: Some(Int32(33)), data_type: Int32 }), FunctionCall(FunctionCall { func_type: Add, return_type: Int32, inputs: [Literal(Literal { data: Some(Int32(1)), data_type: Int32 }), Literal(Literal { data: Some(Int32(2)), data_type: Int32 })] })] }), Literal(Literal { data: Some(Int32(44)), data_type: Int32 })]], schema: Schema { fields: [Field { name = , data_type = Int32 }, Field { name = , data_type = Int32 }] } }

- sql: select * from t
  binder_error: "Item not found: relation \"t\""

- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t;
  plan: |
    LogicalScan { table: "t", columns: ["_row_id", "v1", "v2"] }

- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t where 1<2;
  plan: |
    LogicalFilter { predicate: Condition { conjunctions: [FunctionCall(FunctionCall { func_type: LessThan, return_type: Boolean, inputs: [Literal(Literal { data: Some(Int32(1)), data_type: Int32 }), Literal(Literal { data: Some(Int32(2)), data_type: Int32 })] })] } }
      LogicalScan { table: "t", columns: ["_row_id", "v1", "v2"] }

- sql: |
    create table t (v1 int, v2 int);
    insert into t values (22, 33), (44, 55);
  plan: |
    LogicalInsert { table_name: t, columns: [] }
      LogicalValues { rows: [[Literal(Literal { data: Some(Int32(22)), data_type: Int32 }), Literal(Literal { data: Some(Int32(33)), data_type: Int32 })], [Literal(Literal { data: Some(Int32(44)), data_type: Int32 }), Literal(Literal { data: Some(Int32(55)), data_type: Int32 })]], schema: Schema { fields: [Field { name = , data_type = Int32 }, Field { name = , data_type = Int32 }] } }

