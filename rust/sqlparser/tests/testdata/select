SELECT sqrt(id) FROM foo
---
SELECT sqrt(id) FROM foo
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [UnnamedExpr(Function(Function { name: ObjectName([Ident { value: "sqrt", quote_style: None }]), args: [Unnamed(Expr(Identifier(Ident { value: "id", quote_style: None })))], over: None, distinct: false }))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "foo", quote_style: None }]), alias: None, args: [] }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

# Typed string literal
SELECT INT '1'
---
SELECT INT '1'
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [UnnamedExpr(TypedString { data_type: Int(None), value: "1" })], from: [], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

SELECT (foo).v1.v2 FROM foo
---
SELECT foo.v1.v2 FROM foo
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [UnnamedExpr(FieldIdentifier(Identifier(Ident { value: "foo", quote_style: None }), [Ident { value: "v1", quote_style: None }, Ident { value: "v2", quote_style: None }]))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "foo", quote_style: None }]), alias: None, args: [] }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

SELECT ((((foo).v1)).v2) FROM foo
---
SELECT (foo.v1.v2) FROM foo
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [UnnamedExpr(Nested(FieldIdentifier(Identifier(Ident { value: "foo", quote_style: None }), [Ident { value: "v1", quote_style: None }, Ident { value: "v2", quote_style: None }])))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "foo", quote_style: None }]), alias: None, args: [] }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

SELECT (foo.v1).v2 FROM foo
---
SELECT foo.v1.v2 FROM foo
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [UnnamedExpr(FieldIdentifier(CompoundIdentifier([Ident { value: "foo", quote_style: None }, Ident { value: "v1", quote_style: None }]), [Ident { value: "v2", quote_style: None }]))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "foo", quote_style: None }]), alias: None, args: [] }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

SELECT (v1).v2 FROM foo
---
SELECT v1.v2 FROM foo
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [UnnamedExpr(FieldIdentifier(Identifier(Ident { value: "v1", quote_style: None }), [Ident { value: "v2", quote_style: None }]))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "foo", quote_style: None }]), alias: None, args: [] }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

SELECT ((1,2,3)::foo).v1
---
SELECT CAST(ROW(1, 2, 3) AS foo).v1
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [UnnamedExpr(FieldIdentifier(Cast { expr: Row([Value(Number("1", false)), Value(Number("2", false)), Value(Number("3", false))]), data_type: Custom(ObjectName([Ident { value: "foo", quote_style: None }])) }, [Ident { value: "v1", quote_style: None }]))], from: [], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

SELECT ((1,2,3)::foo).v1.v2
---
SELECT CAST(ROW(1, 2, 3) AS foo).v1.v2
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [UnnamedExpr(FieldIdentifier(Cast { expr: Row([Value(Number("1", false)), Value(Number("2", false)), Value(Number("3", false))]), data_type: Custom(ObjectName([Ident { value: "foo", quote_style: None }])) }, [Ident { value: "v1", quote_style: None }, Ident { value: "v2", quote_style: None }]))], from: [], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

SELECT (((1,2,3)::foo).v1).v2
---
SELECT CAST(ROW(1, 2, 3) AS foo).v1.v2
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [UnnamedExpr(FieldIdentifier(Cast { expr: Row([Value(Number("1", false)), Value(Number("2", false)), Value(Number("3", false))]), data_type: Custom(ObjectName([Ident { value: "foo", quote_style: None }])) }, [Ident { value: "v1", quote_style: None }, Ident { value: "v2", quote_style: None }]))], from: [], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

SELECT (foo).* FROM foo
---
SELECT foo..* FROM foo
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [QualifiedWildcard(Identifier(Ident { value: "foo", quote_style: None }), ObjectName([]))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "foo", quote_style: None }]), alias: None, args: [] }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

SELECT ((foo.v1).v2).* FROM foo
---
SELECT foo.v1.v2.* FROM foo
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [QualifiedWildcard(CompoundIdentifier([Ident { value: "foo", quote_style: None }, Ident { value: "v1", quote_style: None }]), ObjectName([Ident { value: "v2", quote_style: None }]))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "foo", quote_style: None }]), alias: None, args: [] }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

SELECT ((1,2,3)::foo).v1.*
---
SELECT CAST(ROW(1, 2, 3) AS foo).v1.*
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [QualifiedWildcard(Cast { expr: Row([Value(Number("1", false)), Value(Number("2", false)), Value(Number("3", false))]), data_type: Custom(ObjectName([Ident { value: "foo", quote_style: None }])) }, ObjectName([Ident { value: "v1", quote_style: None }]))], from: [], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

SELECT (((((1,2,3)::foo).v1))).*
---
SELECT CAST(ROW(1, 2, 3) AS foo).v1.*
=>
Query(Query { with: None, body: Select(Select { distinct: false, projection: [QualifiedWildcard(Cast { expr: Row([Value(Number("1", false)), Value(Number("2", false)), Value(Number("3", false))]), data_type: Custom(ObjectName([Ident { value: "foo", quote_style: None }])) }, ObjectName([Ident { value: "v1", quote_style: None }]))], from: [], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })

