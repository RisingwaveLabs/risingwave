---
version: "3"
x-airflow-common:
    &airflow-common
    image: apache/airflow:2.6.2-python3.10
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      # AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      # AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- apache-airflow-providers-apache-spark}
    volumes:
      - ./airflow_dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    # depends_on:
    #   &airflow-common-depends-on
    #   redis:
    #     condition: service_healthy
    #   postgres:
    #     condition: service_healthy

services:
  spark:
    image: apache/spark:3.3.1
    command: tail -f /dev/null
    depends_on:
      - minio-0
    volumes:
      - "./spark-script:/spark-script"
    container_name: spark
  presto:
    build: ./presto-with-iceberg
    container_name: presto
  compactor-0:
    extends:
      file: ../../docker/docker-compose.yml
      service: compactor-0
  compute-node-0:
    extends:
      file: ../../docker/docker-compose.yml
      service: compute-node-0
  etcd-0:
    extends:
      file: ../../docker/docker-compose.yml
      service: etcd-0
  frontend-node-0:
    extends:
      file: ../../docker/docker-compose.yml
      service: frontend-node-0
  grafana-0:
    extends:
      file: ../../docker/docker-compose.yml
      service: grafana-0
  meta-node-0:
    extends:
      file: ../../docker/docker-compose.yml
      service: meta-node-0
  minio-0:
    extends:
      file: ../../docker/docker-compose.yml
      service: minio-0
  prometheus-0:
    extends:
      file: ../../docker/docker-compose.yml
      service: prometheus-0
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
      - MYSQL_DATABASE=mydb
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u root -p123456" ]
      interval: 5s
      timeout: 5s
      retries: 5
    container_name: mysql
  connector-node:
    extends:
      file: ../../docker/docker-compose.yml
      service: connector-node
  prepare_mysql:
    image: mysql:8.0
    depends_on: 
      - mysql
    command:
      - /bin/sh
      - -c
      - "mysql -p123456 -h mysql mydb < mysql_prepare.sql"
    volumes:
      - "./mysql_prepare.sql:/mysql_prepare.sql"      
    container_name: prepare_mysql
    restart: on-failure
  datagen:
    build: ../datagen
    depends_on: [mysql]
    command:
      - /bin/sh
      - -c
      - /datagen --mode clickstream --qps 1 mysql --user mysqluser --password mysqlpw --host mysql --port 3306 --db mydb
    container_name: datagen
    restart: on-failure
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./db:/var/lib/postgresql/data
        # - postgresql_data:/var/lib/postgresql/data
  redis:
    image: 'redis:latest'
    expose:
      - 6379
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    depends_on:
      # <<: *airflow-common-depends-on
      airflow-init:
          condition: service_completed_successfully
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      # <<: *airflow-common-depends-on
      airflow-init:
          condition: service_completed_successfully
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    depends_on:
      # <<: *airflow-common-depends-on  
      airflow-init:
          condition: service_completed_successfully
  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      # _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- apache-airflow-providers-apache-spark}

volumes:
  compute-node-0:
    external: false
  etcd-0:
    external: false
  grafana-0:
    external: false
  minio-0:
    external: false
  prometheus-0:
    external: false
name: risingwave-compose