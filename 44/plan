failing query
                                                                                  QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 StreamMaterialize { columns: [col_0, auction.id(hidden), m19.col_0(hidden)], stream_key: [auction.id, m19.col_0], pk_columns: [auction.id, m19.col_0], pk_conflict: NoCheck }
 └─StreamProject { exprs: [1:Int32, auction.id, m19.col_0] }
   └─StreamHashJoin { type: Inner, predicate: m19.col_0 = auction.date_time, output: [m19.col_0, auction.id] }
     ├─StreamExchange { dist: HashShard(m19.col_0) }
     │ └─StreamTableScan { table: m19, columns: [m19.col_0, m19.bid.bidder], pk: [], dist: Single }
     └─StreamExchange { dist: HashShard(auction.date_time) }
       └─StreamTableScan { table: auction, columns: [auction.date_time, auction.id], pk: [auction.id], dist: UpstreamHashShard(auction.id) }
(7 rows)


m19
                                                                                     QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  StreamMaterialize { columns: [col_0, bid.bidder(hidden), bid.auction(hidden), bid.price(hidden)], stream_key: [], pk_columns: [bid.bidder], pk_conflict: NoCheck }
  └─StreamProject { exprs: [bid.date_time, bid.bidder, bid.auction, bid.price] }
    └─StreamTopN { order: [bid.bidder DESC NULLS LAST], limit: 1, offset: 0 }
      └─StreamExchange { dist: Single }
        └─StreamGroupTopN { order: [bid.bidder DESC NULLS LAST], limit: 1, offset: 0, group_key: [$expr1] }
          └─StreamProject { exprs: [bid.date_time, bid.bidder, bid.auction, bid.price, Vnode(bid.auction, bid.bidder, bid.price, bid.date_time) as $expr1] }
            └─StreamHashAgg { group_key: [bid.auction, bid.bidder, bid.price, bid.date_time], aggs: [count] }
              └─StreamExchange { dist: HashShard(bid.auction, bid.bidder, bid.price, bid.date_time) }
                └─StreamTableScan { table: bid, columns: [bid.auction, bid.bidder, bid.price, bid.date_time, bid._row_id], pk: [bid._row_id], dist: UpstreamHashShard(bid._row_id) }
 (9 rows)
