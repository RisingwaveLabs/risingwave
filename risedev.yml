risedev:
  ci-v2:
    - use: minio
    - use: meta-node
    - use: compute-node
    - use: frontend-v2

  # The CI-3node configuration will start 3 compute nodes, 1 meta node, 1 frontend and 1 MinIO.
  ci-3node:
    - use: minio
    - use: meta-node
    - use: compute-node
      port: 5687
      exporter-port: 1222
    - use: compute-node
      port: 5688
      exporter-port: 1223
    - use: compute-node
      port: 5689
      exporter-port: 1224
    - use: frontend

  # The CI-1node configuration will start 1 compute node, 1 meta node, 1 frontend and 1 MinIO.
  ci-1node:
    - use: minio
    - use: etcd
    - use: meta-node
    - use: compute-node
    - use: frontend

  # The default configuration will start 1 MinIO, 1 compute node, 1 meta node and 1 frontend.
  default:
    - use: minio
    # if you want to enable etcd backend, uncomment the following line.
    # - use: etcd
    - use: meta-node
    - use: compute-node
    - use: frontend
    # If you want to enable metrics, uncomment those two lines.
    # - use: prometheus
    # - use: grafana
    # If you want to enable tracing, uncomment the following line.
    # - use: jaeger
    # If you want to use the new frontend, uncomment the following line.
    # - use: frontend-v2

  # `dev-compute-node` have the same settings as default except the the compute node will be started by user.
  dev-compute-node:
    - use: minio
    - use: meta-node
    - use: compute-node
      # If user-managed is true, developers should start the compute-node, and RiseDev will wait for its start.
      user-managed: true
    - use: prometheus
    - use: frontend

  # `dev-frontend` have the same settings as default except the the frontend node will be started by user.
  dev-frontend:
    - use: minio
    - use: meta-node
    - use: compute-node
    - use: frontend
      # If user-managed is true, developers should start the frontend, and RiseDev will wait for its start.
      user-managed: true

  # `dev-meta-node` have the same settings as default except the the meta node will be started by user.
  dev-meta-node:
    - use: minio
    - use: meta-node
      # If user-managed is true, developers should start the frontend, and RiseDev will wait for its start.
      user-managed: true
    - use: compute-node
    - use: frontend

# The `use` field specified in the above `risedev` section will refer to the templates below.
template:
  minio:
    # Listen address of MinIO s3 endpoint
    address: "127.0.0.1"

    # Listen port of MinIO s3 endpoint
    port: 9301

    # Console address of MinIO s3 endpoint
    console-address: "127.0.0.1"

    # Console port of MinIO s3 endpoint
    console-port: 9400

    # Root username (can be used to login to MinIO console)
    root-user: hummockadmin

    # Root password (can be used to login to MinIO console)
    root-password: hummockadmin

    # Hummock username
    hummock-user: hummock

    # Hummock user password
    hummock-password: "12345678"

    # Bucket name to store hummock information
    hummock-bucket: hummock001

    # Id of this instance
    id: minio

    # Prometheus nodes used by this MinIO
    provide-prometheus: "prometheus*"

  etcd:

    # Id of this instance
    id: "etcd"

    # Address of the single-node etcd.
    address: "127.0.0.1"

    # Listen port of the single-node etcd.
    port: 2388

    # Peer listen port of the single-node etcd.
    peer-port: 2389

  compute-node:
    # Compute-node listen address
    address: "127.0.0.1"

    # Compute-node listen port
    port: 5688

    # Prometheus exporter listen address
    exporter-address: "127.0.0.1"

    # Prometheus exporter listen port
    exporter-port: 1222

    # Id of this instance
    id: compute-node-${port}

    # Minio instances used by this compute node
    provide-minio: "minio*"

    # Meta-nodes used by this compute node
    provide-meta-node: "meta-node*"

    # Jaeger used by this compute node
    provide-jaeger: "jaeger*"

    # If `user-managed` is true, this service will be started by user with the above config
    user-managed: false

  meta-node:
    # Meta-node listen address
    address: "127.0.0.1"

    # Meta-node listen port
    port: 5690

    # Dashboard listen address
    dashboard-address: "127.0.0.1"

    # Dashboard listen port
    dashboard-port: 5691

    # Prometheus exporter listen address
    exporter-address: "127.0.0.1"

    # Prometheus exporter listen port
    exporter-port: 1250

    # Id of this instance
    id: meta-node-${port}

    # If `user-managed` is true, this service will be started by user with the above config
    user-managed: false

    # Etcd backend config
    provide-etcd-backend: "etcd*"

  prometheus:
    # Listen address of Prometheus
    address: "127.0.0.1"

    # Listen port of Prometheus
    port: 9500

    # Id of this instance
    id: prometheus

    # Compute-nodes used by this Prometheus instance
    provide-compute-node: "compute-node*"

    # Meta-nodes used by this Prometheus instance
    provide-meta-node: "meta-node*"

    # Minio instances used by this Prometheus instance
    provide-minio: "minio*"

  frontend:
    # Listen address of frontend
    address: "127.0.0.1"

    # Listen port of frontend
    port: 4567

    # Id of this instance
    id: frontend

    # Meta-nodes used by this frontend instance
    provide-meta-node: "meta-node*"

    # If `user-managed` is true, this service will be started by user with the above config
    user-managed: false

  frontend-v2:
    # Listen address of frontend
    address: "127.0.0.1"

    # Listen port of frontend
    port: 4566

    # Id of this instance
    id: frontend-v2

    # Meta-nodes used by this frontend instance
    provide-meta-node: "meta-node*"

    # If `user-managed` is true, this service will be started by user with the above config
    user-managed: false

  grafana:
    # Listen address of Grafana
    address: "127.0.0.1"

    # Listen port of Grafana
    port: 3001

    # Id of this instance
    id: grafana

    # Prometheus used by this Grafana instance
    provide-prometheus: "prometheus*"

  jaeger:
    # Id of this instance
    id: jaeger

    # Dashboard listen address of Jaeger
    dashboard-address: "127.0.0.1"

    # Dashboard listen port of Jaeger
    dashboard-port: 16680

    # Jaeger has a lot of ports open, and we don't want to make this config more complex.
    # So we keep the default value of jaeger instead of making it part of RiseDev config.
