extend = [
  {path = "rust/risedevtool/grafana.toml"},
  {path = "rust/risedevtool/prometheus.toml"},
  {path = "rust/risedevtool/minio.toml"},
  {path = "rust/risedevtool/etcd.toml"},
  {path = "rust/risedevtool/jaeger.toml"},
  {path = "rust/risedevtool/risedev-components.toml"},
]

env_files = [
  "risedev-components.user.env"
]

[env]
RUST_BACKTRACE = 1
RISEDEV_CARGO_BUILD_FLAGS = { value = "--features=all-in-one", condition = { env_set = ["ENABLE_ALL_IN_ONE"] } }

[config]
skip_core_tasks = true

[tasks.clean-full]
category = "Misc"
description = "Clean all downloaded binaries by deleting .risingwave folder"
script = '''
#!@duckscript
rm -rf "${PREFIX}"
'''

[tasks.clean-data]
category = "Misc"
description = "Clean all data, config and logs"
script = '''
#!@duckscript
rm -rf "${PREFIX_DATA}"
rm -rf "${PREFIX_LOG}"
rm -rf "${PREFIX_CONFIG}"
'''

[tasks.logs]
category = "Misc"
description = "Dump logs in a folder"
script = '''
#!/bin/bash
set -e

for out_file in ${PREFIX_LOG}/*.log
do
  echo ""
  echo "==="
  echo "=== Dump log file $out_file ==="
  echo "==="
  echo ""
  cat "$out_file" | tail -n 100
done
'''

[tasks.check-logs]
category = "Misc"
description = "Check if there is panic in log"
script = '''
#!/bin/bash
set -e

for out_file in ${PREFIX_LOG}/*.log
do
  if grep "panic" "$out_file" -C 10; then
    echo "\"panic\" found in $out_file, please check if there's any bugs in this PR."
    echo "You may find \"risedev-logs\" artifacts and download logs after all workflows finish."
    exit 1
  fi
done
'''

[tasks.post-build-risingwave]
category = "RisingWave"
description = "Copy RisingWave binaries to bin"
condition = { env_set = [ "ENABLE_BUILD_RUST" ] }
script = '''
#!/bin/bash
set -e
rm -f "${PREFIX_BIN}/compute-node"
rm -f "${PREFIX_BIN}/meta-node"
rm -f "${PREFIX_BIN}/frontend-v2"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/compute-node" "${PREFIX_BIN}/compute-node"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/meta-node" "${PREFIX_BIN}/meta-node"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/frontend-v2" "${PREFIX_BIN}/frontend-v2"

rm -rf "${PREFIX_BIN}/risingwave"
mkdir -p "${PREFIX_BIN}/risingwave"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/risingwave" "${PREFIX_BIN}/risingwave/meta-node"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/risingwave" "${PREFIX_BIN}/risingwave/compute-node"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/risingwave" "${PREFIX_BIN}/risingwave/frontend-node"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/risingwave" "${PREFIX_BIN}/risingwave/risectl"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/risingwave" "${PREFIX_BIN}/risingwave/playground"

rm -rf "${PREFIX_USR_BIN}"
mkdir -p "${PREFIX_USR_BIN}"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/risingwave" "${PREFIX_USR_BIN}/meta-node"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/risingwave" "${PREFIX_USR_BIN}/compute-node"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/risingwave" "${PREFIX_USR_BIN}/frontend-node"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/risingwave" "${PREFIX_USR_BIN}/risectl"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/risingwave" "${PREFIX_USR_BIN}/playground"
'''

[tasks.build-risingwave]
category = "RisingWave"
description = "Build RisingWave compute-node and meta-node"
condition = { env_set = [ "ENABLE_BUILD_RUST" ] }
script = '''
#!/bin/bash
set -e
echo "**Reminder**: risedev will only build risingwave_cmd and risedev crates"
cd rust && cargo build -p risingwave_cmd -p risedev --profile "${RISINGWAVE_BUILD_PROFILE}" ${RISEDEV_CARGO_BUILD_FLAGS}
'''

[tasks.build-frontend]
category = "RisingWave"
description = "Build RisingWave frontend"
condition = { env_set = [ "ENABLE_BUILD_FRONTEND" ] }
script = '''
#!/bin/bash
set -e
cd java && ./gradlew build -x test
'''

[tasks.post-build-frontend]
category = "RisingWave"
description = "Post build RisingWave frontend"
condition = { env_set = [ "ENABLE_BUILD_FRONTEND" ] }
script = '''
#!/bin/bash

set -e
rm -f "${PREFIX_BIN}/risingwave-fe-runnable.jar"
ln -s "$(pwd)/java/pgserver/build/libs/risingwave-fe-runnable.jar" "${PREFIX_BIN}/risingwave-fe-runnable.jar"
'''

[tasks.prepare-config]
category = "RiseDev - Prepare"
description = "Copy necessary configuration files to RiseDev"
script = '''
#!/bin/bash

set -e

cp "java/pgserver/src/main/resources/logback.xml" "${PREFIX_CONFIG}/logback.xml"
cp "grafana/risingwave-dashboard.json" "${PREFIX_CONFIG}/grafana_dashboard.json"
cp "grafana/aws-s3.json" "${PREFIX_CONFIG}/aws-s3.json"
cp "rust/config/risingwave.toml" "${PREFIX_CONFIG}/risingwave.toml"
cp "rust/risedevtool/run_command.sh" "${PREFIX_BIN}/run_command.sh"
cp "rust/risedevtool/welcome.sh" "${PREFIX_BIN}/welcome.sh"
'''

[tasks.pre-start-playground]
category = "RiseDev - Prepare"
description = "Prepare playground by downloading necessary tools and build required components"
dependencies = [
  "download-minio",
  "download-mcli",
  "download-etcd",
  "download-grafana",
  "download-prometheus",
  "download-jaeger",
  "build-risingwave",
  "post-build-risingwave",
  "build-frontend",
  "post-build-frontend",
  "prepare-config"
]

[tasks.p]
alias = "playground"

[tasks.playground]
category = "RiseDev - Start"
description = "Start single-binary playground"
script = '''
#!/bin/bash

set -e

cd rust
echo "Use \`./risedev d\` instead if you want to start a full cluster."
RW_NODE=playground cargo run --bin risingwave --features=all-in-one --profile "${RISINGWAVE_BUILD_PROFILE}"
'''

[tasks.d]
alias = "dev"

[tasks.ci-v2]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["ci-v2"]
description = "Start a RisingWave playground ci-v2 config"

[tasks.dev]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["default"]
description = "Start a RisingWave playground with default config"

[tasks.ci-3node]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["ci-3node"]
description = "Start a RisingWave playground with ci-3node config"

[tasks.ci-1node]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["ci-1node"]
description = "Start a RisingWave playground ci-1node config"


[tasks.dev-compute-node]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["dev-compute-node"]
description = "Start a RisingWave playground with dev-compute-node config"

[tasks.dev-frontend]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["dev-frontend"]
description = "Start a RisingWave playground with dev-frontend config"

[tasks.dev-meta-node]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["dev-meta-node"]
description = "Start a RisingWave playground with dev-meta-node config"

[tasks.kill-risedev]
category = "RiseDev - Stop"
description = "kill playground"
script = '''
#!/bin/bash
set -e
tmux list-windows -t risedev -F "-#{pane_pid}" | xargs -n 1 kill -SIGINT
tmux kill-session -t risedev
'''

[tasks.kill]
alias = "kill-risedev"

[tasks.k]
alias = "kill-risedev"

[tasks.fill-kafka]
command = "scripts/source/prepare_source.sh"

[tasks.apply-planner-test]
script = '''
#!/bin/bash
set -e
cd rust && cargo run --bin planner-test-apply
for f in frontend/test_runner/tests/testdata/*.apply.yaml; do
  yq -N -I4 -i '.. style="literal"' "$f"
done
'''
