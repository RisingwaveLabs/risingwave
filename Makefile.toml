extend = [
  {path = "rust/risedev/grafana.toml"},
  {path = "rust/risedev/prometheus.toml"},
  {path = "rust/risedev/minio.toml"},
  {path = "rust/risedev/jaeger.toml"},
  {path = "rust/risedev/risedev-components.toml"},
]

env_files = [
  "risedev-components.user.env"
]

[env]
RUST_BACKTRACE = 1

[config]
skip_core_tasks = true

[tasks.clean-full]
category = "Misc"
description = "Clean all downloaded binaries by deleting .risingwave folder"
script = '''
#!@duckscript
rm -rf "${PREFIX}"
'''

[tasks.clean-data]
category = "Misc"
description = "Clean all data, config and logs"
script = '''
#!@duckscript
rm -rf "${PREFIX_DATA}"
rm -rf "${PREFIX_LOG}"
rm -rf "${PREFIX_CONFIG}"
'''

[tasks.logs]
category = "Misc"
description = "Dump logs in a folder"
script = '''
#!@shell
set -e

for out_file in ${PREFIX_LOG}/*.log
do
  echo ""
  echo "==="
  echo "=== Dump log file $out_file ==="
  echo "==="
  echo ""
  cat "$out_file" | tail -n 100
done
'''

[tasks.check-logs]
category = "Misc"
description = "Check if there is panic in log"
script = '''
#!@shell
set -e

for out_file in ${PREFIX_LOG}/*.log
do
  if grep "panic" "$out_file" -C 10; then
    echo "\"panic\" found in $out_file, please check if there's any bugs in this PR."
    echo "You may find \"risedev-logs\" artifacts and download logs after all workflows finish."
    exit 1
  fi
done
'''

[tasks.post-build-risingwave]
category = "RisingWave"
description = "Copy RisingWave binaries to bin"
condition = { env_set = [ "ENABLE_BUILD_RUST" ] }
script = '''
#!@shell
set -e
rm -f "${PREFIX_BIN}/compute-node"
rm -f "${PREFIX_BIN}/meta-node"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/compute-node" "${PREFIX_BIN}/compute-node"
ln -s "$(pwd)/rust/target/${BUILD_MODE_DIR}/meta-node" "${PREFIX_BIN}/meta-node"
'''

[tasks.build-risingwave]
category = "RisingWave"
description = "Build RisingWave compute-node and meta-node"
condition = { env_set = [ "ENABLE_BUILD_RUST" ] }
script = '''
#!@shell
set -e
cd rust && cargo build --profile ${RISINGWAVE_BUILD_PROFILE}
'''

[tasks.build-frontend]
category = "RisingWave"
description = "Build RisingWave frontend"
condition = { env_set = [ "ENABLE_BUILD_FRONTEND" ] }
script = '''
#!@shell
set -e
cd java && ./gradlew build -x test
'''

[tasks.post-build-frontend]
category = "RisingWave"
description = "Post build RisingWave frontend"
condition = { env_set = [ "ENABLE_BUILD_FRONTEND" ] }
script = '''
#!@shell

set -e
rm -f "${PREFIX_BIN}/risingwave-fe-runnable.jar"
ln -s "$(pwd)/java/pgserver/build/libs/risingwave-fe-runnable.jar" "${PREFIX_BIN}/risingwave-fe-runnable.jar"
'''

[tasks.prepare-config]
category = "RiseDev - Prepare"
description = "Copy necessary configuration files to RiseDev"
script = '''
#!@shell

set -e

cp "java/pgserver/src/main/resources/logback.xml" "${PREFIX_CONFIG}/logback.xml"
cp "grafana/dashboard.json" "${PREFIX_CONFIG}/grafana_dashboard.json"
cp "rust/config/risingwave.toml" "${PREFIX_CONFIG}/risingwave.toml"
cp "rust/risedev/run_command.sh" "${PREFIX_BIN}/run_command.sh"
cp "rust/risedev/welcome.sh" "${PREFIX_BIN}/welcome.sh"
'''

[tasks.pre-start-playground]
category = "RiseDev - Prepare"
description = "Prepare playground by downloading necessary tools and build required components"
dependencies = [
  "download-minio",
  "download-mcli",
  "download-grafana",
  "download-prometheus",
  "download-jaeger",
  "build-risingwave",
  "post-build-risingwave",
  "build-frontend",
  "post-build-frontend",
  "prepare-config"
]
script = '''
#!@shell

set -e
tmux -V
echo "Note: please make sure tmux version >= 3.2a"
'''

[tasks.playground]
alias = "dev"

[tasks.d]
alias = "dev"

[tasks.dev]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["default"]
description = "Start a RisingWave playground with default config"

[tasks.ci-3node]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["ci-3node"]
description = "Start a RisingWave playground with ci-3node config"


[tasks.ci-1node]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["ci-1node"]
description = "Start a RisingWave playground ci-1node config"

[tasks.ci-1node]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["ci-1node"]
description = "Start a RisingWave playground ci-1node config"

[tasks.dev-compute-node]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["dev-compute-node"]
description = "Start a RisingWave playground with dev-compute-node config"

[tasks.dev-frontend]
category = "RiseDev - Start"
dependencies = [
  "pre-start-playground"
]
command = "rust/target/${BUILD_MODE_DIR}/risedev-playground"
args = ["dev-frontend"]
description = "Start a RisingWave playground with dev-frontend config"

[tasks.kill-playground]
category = "RiseDev - Stop"
description = "kill playground"
script = '''
#!@shell
set -e
tmux list-windows -t risedev -F "-#{pane_pid}" | xargs -n 1 kill -SIGINT
tmux kill-session -t risedev
'''

[tasks.kill]
alias = "kill-playground"

[tasks.k]
alias = "kill-playground"

[tasks.fill-kafka]
command = "scripts/source/prepare_source.sh"
