statement ok
create table s with (
  connector = 'kafka',
  topic = 'kafka_1_partition_topic',
  properties.bootstrap.server = '127.0.0.1:29092'
) row format json;

statement ok
drop table s

query T
show sources
----

query T
show tables
----

statement ok
create source s with (
  connector = 'kafka',
  topic = 'kafka_1_partition_topic',
  properties.bootstrap.server = '127.0.0.1:29092'
) row format json;

statement ok
create materialized view mv_1 as select * from s

statement error other relation\(s\) depend on it
drop source s

statement ok
drop materialized view mv_1

statement ok
drop source s

query T
show sources
----

query T
show tables
----

statement ok
create source s with (
  connector = 'kafka',
  topic = 'kafka_1_partition_topic',
  properties.bootstrap.server = '127.0.0.1:29092'
) row format json;

query T
show sources
----
s

query T
show tables
----

statement ok
drop source s

statement ok
create table s with (
  connector = 'kafka',
  topic = 'kafka_1_partition_topic',
  properties.bootstrap.server = '127.0.0.1:29092'
) row format json;

# We should introduce `show connectors` to display all connectors created via both
# `create source` and `create table`.
query T
show sources
----


query T
show tables
----
s

statement ok
drop table s

# Test create source with connection
statement ok 
CREATE CONNECTION mock WITH (type = 'privatelink', provider = 'mock');

# Reference to non-existant connection
statement error
create source s with (
  connector = 'kafka',
  topic = 'kafka_1_partition_topic',
  properties.bootstrap.server = '127.0.0.1:29092',
  connection.name = 'nonexist',
) row format json;

statement ok
create source s with (
  connector = 'kafka',
  topic = 'kafka_1_partition_topic',
  properties.bootstrap.server = '127.0.0.1:29092',
  connection.name = 'mock',
) row format json;

# Drop a connection in use
statement error
drop connection mock;

statement ok
drop source s;

statement ok
drop connection mock;
