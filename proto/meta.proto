syntax = "proto3";

package meta;

option java_multiple_files = true;
option java_package = "com.risingwave.proto.metanode";
option optimize_for = SPEED;

import "common.proto";
import "plan.proto";
import "stream_plan.proto";

message Table {
  plan.TableRefId table_ref_id = 1;
  string table_name = 2;
  repeated plan.ColumnDesc column_descs = 3;
  uint64 version = 4;
  oneof info {
    plan.StreamSourceInfo stream_source = 5;
    plan.TableSourceInfo table_source = 6;
    plan.MaterializedViewInfo materialized_view = 7;
  }
}

message Database {
  plan.DatabaseRefId database_ref_id = 1;
  string database_name = 2;
  uint64 version = 3;
}

message Schema {
  plan.SchemaRefId schema_ref_id = 1;
  string schema_name = 2;
  uint64 version = 3;
}

// Below for epoch service.

message GetEpochRequest {}

message GetEpochResponse {
  common.Status status = 1;
  uint64 epoch = 2;
}

service EpochService {
  rpc GetEpoch(GetEpochRequest) returns (GetEpochResponse);
}

// Below for catalog service.

message CreateRequest {
  uint32 node_id = 1;
  oneof catalog_body {
    Database database = 2;
    Schema schema = 3;
    Table table = 4;
  }
}

message CreateResponse {
  common.Status status = 1;
  int32 id = 2;
  uint64 version = 3;
}

message DropRequest {
  uint32 node_id = 1;
  oneof catalog_id {
    plan.DatabaseRefId database_id = 2;
    plan.SchemaRefId schema_id = 3;
    plan.TableRefId table_id = 4;
  }
}

message DropResponse {
  common.Status status = 1;
}

message GetCatalogRequest {}

message Catalog {
  repeated Database databases = 1;
  repeated Schema schemas = 2;
  repeated Table tables = 3;
}

message GetCatalogResponse {
  common.Status status = 1;
  Catalog catalog = 2;
}

service CatalogService {
  rpc GetCatalog(GetCatalogRequest) returns (GetCatalogResponse);
  rpc Create(CreateRequest) returns (CreateResponse);
  rpc Drop(DropRequest) returns (DropResponse);
}

// Below for heartbeat.
message HeartbeatRequest {
  uint32 node_id = 1;
  common.WorkerType worker_type = 2;
}

message HeartbeatResponse {
  common.Status status = 1;
}

service HeartbeatService {
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

// Below for stream manager.

// Fragments of a Materialized View
message TableFragments {
  // Current state of actor
  enum ActorState {
    // Initial state after creation
    INACTIVE = 0;
    // Running normally
    RUNNING = 1;
  }
  // Runtime information of an actor
  message ActorStatus {
    // Current on which node
    uint32 node_id = 1;
    // Current state
    ActorState state = 2;
  }
  message Fragment {
    enum FragmentType {
      SOURCE = 0;
      SINK = 1;
      OTHERS = 2;
    }
    uint32 fragment_id = 1;
    FragmentType fragment_type = 2;
    repeated stream_plan.StreamActor actors = 3;
  }
  plan.TableRefId table_ref_id = 1;
  map<uint32, Fragment> fragments = 3;
  map<uint32, ActorStatus> actor_status = 4;
}

// TODO: remove this when dashboard refactored.
message ActorLocation {
  common.WorkerNode node = 1;
  repeated stream_plan.StreamActor actors = 2;
}

message CreateMaterializedViewRequest {
  uint32 node_id = 1;
  // TODO: remove this, do catalog init in Meta and return in response.
  plan.TableRefId table_ref_id = 2;
  stream_plan.StreamNode stream_node = 3;
}

message CreateMaterializedViewResponse {
  common.Status status = 1;
}

message DropMaterializedViewRequest {
  uint32 node_id = 1;
  plan.TableRefId table_ref_id = 2;
}

message DropMaterializedViewResponse {
  common.Status status = 1;
}

message FlushRequest {}

message FlushResponse {
  common.Status status = 1;
}

service StreamManagerService {
  // TODO: migration mv catalog creation/drop in.
  rpc CreateMaterializedView(CreateMaterializedViewRequest) returns (CreateMaterializedViewResponse);
  rpc DropMaterializedView(DropMaterializedViewRequest) returns (DropMaterializedViewResponse);
  rpc Flush(FlushRequest) returns (FlushResponse);
}

message AddWorkerNodeRequest {
  common.WorkerType worker_type = 1;
  common.HostAddress host = 2;
}

message AddWorkerNodeResponse {
  common.Status status = 1;
  common.WorkerNode node = 2;
}

message ActivateWorkerNodeRequest {
  common.HostAddress host = 1;
}

message ActivateWorkerNodeResponse {
  common.Status status = 1;
}

message DeleteWorkerNodeRequest {
  common.HostAddress host = 1;
}

message DeleteWorkerNodeResponse {
  common.Status status = 1;
}

message ListAllNodesRequest {
  common.WorkerType worker_type = 1;
  // Whether to include nodes still starting
  bool include_starting_nodes = 2;
}

message ListAllNodesResponse {
  common.Status status = 1;
  repeated common.WorkerNode nodes = 2;
}

service ClusterService {
  rpc AddWorkerNode(AddWorkerNodeRequest) returns (AddWorkerNodeResponse);
  rpc ActivateWorkerNode(ActivateWorkerNodeRequest) returns (ActivateWorkerNodeResponse);
  rpc DeleteWorkerNode(DeleteWorkerNodeRequest) returns (DeleteWorkerNodeResponse);
  rpc ListAllNodes(ListAllNodesRequest) returns (ListAllNodesResponse);
}

// Below for notification service.
message SubscribeRequest {
  common.WorkerType worker_type = 1;
  common.HostAddress host = 2;
}

message SubscribeResponse {
  enum Operation {
    INVALID = 0;
    ADD = 1;
    DELETE = 2;
    UPDATE = 3;
  }
  common.Status status = 1;
  Operation operation = 2;
  oneof info {
    common.WorkerNode node = 3;
    Database database = 4;
    Schema schema = 5;
    Table table = 6;
  }
}

service NotificationService {
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);
}
