syntax = "proto3";

package hummock;

option java_multiple_files = true;
option java_package = "com.risingwave.proto.hummock";
option optimize_for = SPEED;

import "common.proto";

message SstableRefId {
  uint64 id = 1;
}

message SstableInfo {
  uint64 id = 1;
  KeyRange key_range = 2;
}

message BlockMeta {
  bytes smallest_key = 1;
  uint32 offset = 2;
  uint32 len = 3;
}

message SstableMeta {
  // Offsets of different blocks
  repeated BlockMeta block_metas = 1;
  bytes bloom_filter = 2;
  // Estimated size, only used on encryption or compression
  uint32 estimated_size = 3;
  uint32 key_count = 5;
  // Serve as cheap index.
  // Since table is ordered, they are exactly the first key and last key.
  // The keys are appended by timestamp.
  bytes smallest_key = 6;
  bytes largest_key = 7;
}

message Checksum {
  enum Algorithm {
    CRC32C = 0;
    XX_HASH64 = 1;
  }
  // For storing type of Checksum algorithm used
  Algorithm algo = 1;
  uint64 sum = 2;
}

enum LevelType {
  NONOVERLAPPING = 0;
  OVERLAPPING = 1;
}

message Level {
  LevelType level_type = 1;
  repeated uint64 table_ids = 2;
}

message UncommittedEpoch {
  uint64 epoch = 1;
  repeated uint64 table_ids = 2;
}

message HummockVersionRefId {
  uint64 id = 1;
}

message HummockVersion {
  uint64 id = 1;
  repeated Level levels = 2;
  repeated UncommittedEpoch uncommitted_epochs = 3;
  uint64 max_committed_epoch = 4;
}

message HummockSnapshot {
  uint64 epoch = 1;
}

message AddTablesRequest {
  uint32 context_id = 1;
  repeated SstableInfo tables = 2;
  uint64 epoch = 3;
}

message AddTablesResponse {
  common.Status status = 1;
  HummockVersion version = 2;
}

message PinVersionRequest {
  uint32 context_id = 1;
  HummockVersionRefId last_pinned = 2;
}

message PinVersionResponse {
  common.Status status = 1;
  HummockVersion pinned_version = 2;
}

message UnpinVersionRequest {
  uint32 context_id = 1;
  uint64 pinned_version_id = 2;
}

message UnpinVersionResponse {
  common.Status status = 1;
}

message PinSnapshotRequest {
  uint32 context_id = 1;
  HummockSnapshot last_pinned = 2;
}

message PinSnapshotResponse {
  common.Status status = 1;
  HummockSnapshot snapshot = 2;
}

message UnpinSnapshotRequest {
  uint32 context_id = 1;
  HummockSnapshot snapshot = 2;
}

message UnpinSnapshotResponse {
  common.Status status = 1;
}

message LevelEntry {
  uint32 level_idx = 1;
  Level level = 2;
}

message KeyRange {
  bytes left = 1;
  bytes right = 2;
  bool inf = 3;
}

message TableSetStatistics {
  uint32 level_idx = 1;
  double size_gb = 2;
  uint64 cnt = 3;
}

message CompactMetrics {
  TableSetStatistics read_level_n = 1;
  TableSetStatistics read_level_nplus1 = 2;
  TableSetStatistics write = 3;
}

message CompactTask {
  // SSTs to be compacted, which will be removed from LSM after compaction
  repeated LevelEntry input_ssts = 1;
  // In ideal case, the compaction will generate `splits.len()` tables which have key range
  // corresponding to that in [`splits`], respectively
  repeated KeyRange splits = 2;
  // low watermark in 'ts-aware compaction'
  uint64 watermark = 3;
  // compacion output, which will be added to [`target_level`] of LSM after compaction
  repeated SstableInfo sorted_output_ssts = 4;
  // task id assigned by hummock storage service
  uint64 task_id = 5;
  // compacion output will be added to [`target_level`] of LSM after compaction
  uint32 target_level = 6;
  bool is_target_ultimate_and_leveling = 7;
  CompactMetrics metrics = 8;
}

message ReportCompactionTasksRequest {
  CompactTask compact_task = 2;
  bool task_result = 3;
}

message ReportCompactionTasksResponse {
  common.Status status = 1;
}

message HummockContextRefId {
  uint32 id = 1;
}

message HummockContextPinnedVersion {
  uint32 context_id = 1;
  repeated uint64 version_id = 2;
}

message HummockContextPinnedSnapshot {
  uint32 context_id = 1;
  repeated uint64 snapshot_id = 2;
}

message HummockTablesToDelete {
  uint64 version_id = 1;
  // sstable ids
  repeated uint64 id = 2;
}

message CommitEpochRequest {
  uint64 epoch = 1;
}

message CommitEpochResponse {
  common.Status status = 1;
}

message AbortEpochRequest {
  uint64 epoch = 1;
}

message AbortEpochResponse {
  common.Status status = 1;
}

message GetNewTableIdRequest {}

message GetNewTableIdResponse {
  common.Status status = 1;
  uint64 table_id = 2;
}

message SubscribeCompactTasksRequest {}

message SubscribeCompactTasksResponse {
  CompactTask compact_task = 1;
  VacuumTask vacuum_task = 2;
}

message VacuumTask {
  message VacuumTrackedData {
    repeated uint64 sstable_ids = 1;
  }
  message VaccumOrphanData {}

  oneof task {
    VacuumTrackedData tracked = 1;
    VaccumOrphanData orphan = 2;
  }
}

service HummockManagerService {
  rpc PinVersion(PinVersionRequest) returns (PinVersionResponse);
  rpc UnpinVersion(UnpinVersionRequest) returns (UnpinVersionResponse);
  rpc AddTables(AddTablesRequest) returns (AddTablesResponse);
  rpc ReportCompactionTasks(ReportCompactionTasksRequest) returns (ReportCompactionTasksResponse);
  rpc PinSnapshot(PinSnapshotRequest) returns (PinSnapshotResponse);
  rpc UnpinSnapshot(UnpinSnapshotRequest) returns (UnpinSnapshotResponse);
  rpc CommitEpoch(CommitEpochRequest) returns (CommitEpochResponse);
  rpc AbortEpoch(AbortEpochRequest) returns (AbortEpochResponse);
  rpc GetNewTableId(GetNewTableIdRequest) returns (GetNewTableIdResponse);
  rpc SubscribeCompactTasks(SubscribeCompactTasksRequest) returns (stream SubscribeCompactTasksResponse);
}
