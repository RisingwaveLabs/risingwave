syntax = "proto3";

package connector_service;

import "data.proto";

option java_outer_classname = "ConnectorServiceProto";
option java_package = "com.risingwave.proto";

message SinkConfig {
  message TableSchema {
    message Column {
      string name = 1;
      data.DataType.TypeName data_type = 2;
    }
    repeated Column columns = 1;
    repeated uint32 pk_indices = 2;
  }
  string sink_type = 1;
  map<string, string> properties = 2;
  TableSchema table_schema = 3;
}

message SinkStreamRequest {
  message StartSink {
    SinkConfig sink_config = 1;
  }

  message WriteBatch {
    message JsonPayload {
      message RowOp {
        data.Op op_type = 1;
        string line = 2;
      }
      repeated RowOp row_ops = 1;
    }

    oneof payload {
      JsonPayload json_payload = 1;
    }

    uint64 batch_id = 3;
    uint64 epoch = 4;
  }

  message StartEpoch {
    uint64 epoch = 1;
  }

  message SyncBatch {
    uint64 epoch = 1;
  }

  oneof request {
    StartSink start = 1;
    StartEpoch start_epoch = 2;
    WriteBatch write = 3;
    SyncBatch sync = 4;
  }
}

message SinkResponse {
  message SyncResponse {
    uint64 epoch = 1;
  }

  message StartEpochResponse {
    uint64 epoch = 1;
  }

  message WriteResponse {
    uint64 epoch = 1;
    uint64 batch_id = 2;
  }

  message StartResponse {}

  oneof response {
    SyncResponse sync = 2;
    StartEpochResponse start_epoch = 3;
    WriteResponse write = 4;
    StartResponse start = 5;
  }
}

message DbConnectorProperties {
  string database_host = 1;
  string database_port = 2;
  string database_user = 3;
  string database_password = 4;
  string database_name = 5;
  string table_name = 6;
  string partition = 7;
  string start_offset = 8;
  bool include_schema_events = 9;
}

message CdcMessage {
  string payload = 1;
  string partition = 2;
  string offset = 3;
}

message GetEventStreamRequest {
  uint64 source_id = 1;
  DbConnectorProperties properties = 2;
}

message GetEventStreamResponse {
  uint64 source_id = 1;
  repeated CdcMessage events = 2;
}

service ConnectorService {
  rpc SinkStream(stream SinkStreamRequest) returns (stream SinkResponse);
  rpc GetEventStream(GetEventStreamRequest) returns (stream GetEventStreamResponse);
}
