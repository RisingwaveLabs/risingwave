syntax = "proto3";

package plan;

option java_multiple_files = true;
option java_package = "com.risingwave.proto.plan";
option optimize_for = SPEED;

import "common.proto";
import "data.proto";
import "expr.proto";

// Field is a column in the streaming or batch plan.
message Field {
  data.DataType data_type = 1;
  string name = 2;
}

message DatabaseRefId {
  int32 database_id = 1;
}

message SchemaRefId {
  DatabaseRefId database_ref_id = 1;
  int32 schema_id = 2;
}

message TableRefId {
  SchemaRefId schema_ref_id = 1;
  int32 table_id = 2;
}

message ColumnDesc {
  data.DataType column_type = 1;
  int32 column_id = 2;
  // we store the column name in column desc now just for debug, but in future we should store it in ColumnCatalog but not here
  string name = 3;
}

message OrderedColumn {
  ColumnDesc column_desc = 1;
  OrderType order = 2;
}

message ColumnCatalog {
  ColumnDesc column_desc = 1;
  bool is_hidden = 2;
}

message CellBasedTableDesc {
  int32 table_id = 1;
  repeated OrderedColumn pk = 2;
}

message StreamSourceInfo {
  bool append_only = 1;
  map<string, string> properties = 2;
  RowFormatType row_format = 3;
  string row_schema_location = 4;
  int32 row_id_index = 5;
}

message TableSourceInfo {}

message MaterializedViewInfo {
  TableRefId associated_table_ref_id = 1;
  repeated ColumnOrder column_orders = 2;
  repeated int32 pk_indices = 3;
  repeated TableRefId dependent_tables = 4;
}

message RowSeqScanNode {
  TableRefId table_ref_id = 1;
  repeated ColumnDesc column_descs = 2;
}

message SourceScanNode {
  TableRefId table_ref_id = 1;
  // timestamp_ms is used for offset synchronization of high level consumer groups, this field will be deprecated if a more elegant approach is available in the future
  int64 timestamp_ms = 2;
  repeated int32 column_ids = 3;
}

message ProjectNode {
  repeated expr.ExprNode select_list = 1;
}

message FilterNode {
  expr.ExprNode search_condition = 1;
}

message FilterScanNode {
  TableRefId table_ref_id = 1;
  repeated int32 column_ids = 2;
}

message InsertNode {
  TableRefId table_source_ref_id = 1;
  repeated int32 column_ids = 2;
}

message ValuesNode {
  message ExprTuple {
    repeated expr.ExprNode cells = 1;
  }
  repeated ExprTuple tuples = 1;
  repeated Field fields = 2;
}

message CreateTableNode {
  TableRefId table_ref_id = 1;
  repeated ColumnDesc column_descs = 2;
  // Other fields not included yet:
  // primarykey_col_ids, dist_type, distkey_col_id, append_only

  // We re-use the CreateTableNode for creating materialized views.
  oneof info {
    TableSourceInfo table_source = 3;
    MaterializedViewInfo materialized_view = 4;
  }
}

enum OrderType {
  INVALID = 0;
  ASCENDING = 1;
  DESCENDING = 2;
}

message ColumnOrder {
  // maybe other name
  OrderType order_type = 1;
  expr.InputRefExpr input_ref = 2;
  data.DataType return_type = 3;
}

message OrderByNode {
  repeated ColumnOrder column_orders = 1;
}

message TopNNode {
  repeated ColumnOrder column_orders = 1;
  uint32 limit = 2;
}

message LimitNode {
  uint32 limit = 1;
  uint32 offset = 2;
}

enum RowFormatType {
  JSON = 0;
  PROTOBUF = 1;
  DEBEZIUM_JSON = 2;
  AVRO = 3;
}

message CreateSourceNode {
  TableRefId table_ref_id = 1;
  repeated ColumnDesc column_descs = 2;
  StreamSourceInfo info = 3;
}

message DropSourceNode {
  TableRefId table_ref_id = 1;
}

message DropTableNode {
  TableRefId table_ref_id = 1;
}

enum JoinType {
  // Note that it comes from Calcite's JoinRelType.
  // DO NOT HAVE direction for SEMI and ANTI now.
  INNER = 0;
  LEFT_OUTER = 1;
  RIGHT_OUTER = 2;
  FULL_OUTER = 3;
  LEFT_SEMI = 4;
  LEFT_ANTI = 5;
  RIGHT_SEMI = 6;
  RIGHT_ANTI = 7;
}

message NestedLoopJoinNode {
  JoinType join_type = 1;
  expr.ExprNode join_cond = 2;
}

message HashAggNode {
  repeated uint32 group_keys = 1;
  repeated expr.AggCall agg_calls = 2;
}

message SortAggNode {
  repeated expr.ExprNode group_keys = 1;
  repeated expr.AggCall agg_calls = 2;
}

message HashJoinNode {
  JoinType join_type = 1;
  repeated int32 left_key = 2;
  repeated int32 left_output = 3;
  repeated int32 right_key = 4;
  repeated int32 right_output = 5;
}

message SortMergeJoinNode {
  JoinType join_type = 1;
  repeated int32 left_keys = 2;
  repeated int32 right_keys = 3;
  OrderType direction = 4;
}

message GenerateInt32SeriesNode {
  int32 start = 1;
  int32 stop = 2;
  int32 step = 3;
}

message QueryId {
  string trace_id = 1;
}

message StageId {
  QueryId query_id = 1;
  uint32 stage_id = 2;
}

message TaskId {
  StageId stage_id = 1;
  uint32 task_id = 2;
}

message TaskSinkId {
  TaskId task_id = 1;
  uint32 sink_id = 2;
}

message ExchangeSource {
  TaskSinkId sink_id = 1;
  common.HostAddress host = 2;
}

message ExchangeNode {
  repeated ExchangeSource sources = 1;
  // An exchange only links to one stage, but a stage could be
  // linked by multiple exchanges.
  StageId source_stage_id = 2;
  repeated Field input_schema = 3;
}

message MergeSortExchangeNode {
  ExchangeNode exchange_node = 1;
  repeated ColumnOrder column_orders = 2;
}

message PlanNode {
  repeated PlanNode children = 1;
  oneof node_body {
    InsertNode insert = 2;
    ProjectNode project = 4;
    CreateTableNode create_table = 5;
    DropTableNode drop_table = 6;
    HashAggNode hash_agg = 7;
    FilterNode filter = 8;
    ExchangeNode exchange = 9;
    OrderByNode order_by = 10;
    NestedLoopJoinNode nested_loop_join = 11;
    CreateSourceNode create_source = 12;
    SourceScanNode source_scan = 13;
    TopNNode top_n = 14;
    SortAggNode sort_agg = 15;
    RowSeqScanNode row_seq_scan = 16;
    LimitNode limit = 17;
    ValuesNode values = 18;
    HashJoinNode hash_join = 19;
    DropSourceNode drop_source = 20;
    MergeSortExchangeNode merge_sort_exchange = 21;
    SortMergeJoinNode sort_merge_join = 22;
    GenerateInt32SeriesNode generate_int32_series = 23;
  }
  string identity = 24;
}

message ExchangeInfo {
  enum DistributionMode {
    // No partitioning at all, used for root segment which aggregates query results
    SINGLE = 0;
    BROADCAST = 1;
    HASH = 2;
  }
  message BroadcastInfo {
    uint32 count = 1;
  }
  message HashInfo {
    enum HashMethod {
      CRC32 = 0;
    }
    uint32 output_count = 1;
    HashMethod hash_method = 2;
    repeated uint32 keys = 3;
  }
  DistributionMode mode = 1;
  oneof distribution {
    BroadcastInfo broadcast_info = 2;
    HashInfo hash_info = 3;
  }
  // TODO: Add fields to optimize for local buffer

}

message PlanFragment {
  PlanNode root = 1;
  ExchangeInfo exchange_info = 2;
}
