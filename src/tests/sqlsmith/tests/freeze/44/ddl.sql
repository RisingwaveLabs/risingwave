CREATE TABLE supplier (s_suppkey INT, s_name CHARACTER VARYING, s_address CHARACTER VARYING, s_nationkey INT, s_phone CHARACTER VARYING, s_acctbal NUMERIC, s_comment CHARACTER VARYING, PRIMARY KEY (s_suppkey));
CREATE TABLE part (p_partkey INT, p_name CHARACTER VARYING, p_mfgr CHARACTER VARYING, p_brand CHARACTER VARYING, p_type CHARACTER VARYING, p_size INT, p_container CHARACTER VARYING, p_retailprice NUMERIC, p_comment CHARACTER VARYING, PRIMARY KEY (p_partkey));
CREATE TABLE partsupp (ps_partkey INT, ps_suppkey INT, ps_availqty INT, ps_supplycost NUMERIC, ps_comment CHARACTER VARYING, PRIMARY KEY (ps_partkey, ps_suppkey));
CREATE TABLE customer (c_custkey INT, c_name CHARACTER VARYING, c_address CHARACTER VARYING, c_nationkey INT, c_phone CHARACTER VARYING, c_acctbal NUMERIC, c_mktsegment CHARACTER VARYING, c_comment CHARACTER VARYING, PRIMARY KEY (c_custkey));
CREATE TABLE orders (o_orderkey BIGINT, o_custkey INT, o_orderstatus CHARACTER VARYING, o_totalprice NUMERIC, o_orderdate DATE, o_orderpriority CHARACTER VARYING, o_clerk CHARACTER VARYING, o_shippriority INT, o_comment CHARACTER VARYING, PRIMARY KEY (o_orderkey));
CREATE TABLE lineitem (l_orderkey BIGINT, l_partkey INT, l_suppkey INT, l_linenumber INT, l_quantity NUMERIC, l_extendedprice NUMERIC, l_discount NUMERIC, l_tax NUMERIC, l_returnflag CHARACTER VARYING, l_linestatus CHARACTER VARYING, l_shipdate DATE, l_commitdate DATE, l_receiptdate DATE, l_shipinstruct CHARACTER VARYING, l_shipmode CHARACTER VARYING, l_comment CHARACTER VARYING, PRIMARY KEY (l_orderkey, l_linenumber));
CREATE TABLE nation (n_nationkey INT, n_name CHARACTER VARYING, n_regionkey INT, n_comment CHARACTER VARYING, PRIMARY KEY (n_nationkey));
CREATE TABLE region (r_regionkey INT, r_name CHARACTER VARYING, r_comment CHARACTER VARYING, PRIMARY KEY (r_regionkey));
CREATE TABLE person (id BIGINT, name CHARACTER VARYING, email_address CHARACTER VARYING, credit_card CHARACTER VARYING, city CHARACTER VARYING, state CHARACTER VARYING, date_time TIMESTAMP, extra CHARACTER VARYING, PRIMARY KEY (id));
CREATE TABLE auction (id BIGINT, item_name CHARACTER VARYING, description CHARACTER VARYING, initial_bid BIGINT, reserve BIGINT, date_time TIMESTAMP, expires TIMESTAMP, seller BIGINT, category BIGINT, extra CHARACTER VARYING, PRIMARY KEY (id));
CREATE TABLE bid (auction BIGINT, bidder BIGINT, price BIGINT, channel CHARACTER VARYING, url CHARACTER VARYING, date_time TIMESTAMP, extra CHARACTER VARYING);
CREATE TABLE alltypes1 (c1 BOOLEAN, c2 SMALLINT, c3 INT, c4 BIGINT, c5 REAL, c6 DOUBLE, c7 NUMERIC, c8 DATE, c9 CHARACTER VARYING, c10 TIME, c11 TIMESTAMP, c13 INTERVAL, c14 STRUCT<a INT>, c15 INT[], c16 CHARACTER VARYING[]);
CREATE TABLE alltypes2 (c1 BOOLEAN, c2 SMALLINT, c3 INT, c4 BIGINT, c5 REAL, c6 DOUBLE, c7 NUMERIC, c8 DATE, c9 CHARACTER VARYING, c10 TIME, c11 TIMESTAMP, c13 INTERVAL, c14 STRUCT<a INT>, c15 INT[], c16 CHARACTER VARYING[]);
CREATE MATERIALIZED VIEW m0 AS SELECT (REAL '-1888827867') AS col_0 FROM tumble(alltypes1, alltypes1.c11, INTERVAL '41') AS tumble_0 GROUP BY tumble_0.c16, tumble_0.c2, tumble_0.c7, tumble_0.c4, tumble_0.c15;
CREATE MATERIALIZED VIEW m2 AS SELECT sq_3.col_0 AS col_0, (FLOAT '632') AS col_1 FROM (WITH with_0 AS (SELECT (REAL '2147483647') AS col_0, (BIGINT '-9107675361402025705') AS col_1, TIMESTAMP '2022-01-01 14:31:40' AS col_2 FROM person AS t_1 LEFT JOIN supplier AS t_2 ON t_1.credit_card = t_2.s_address AND true WHERE (((REAL '1') * ((INT '647') * (INTERVAL '0'))) < TIME '07:35:21') GROUP BY t_1.id, t_2.s_address, t_2.s_name, t_1.email_address) SELECT (INTERVAL '60') AS col_0, (REAL '1763263074') AS col_1 FROM with_0 WHERE (true)) AS sq_3 WHERE ((FLOAT '44') <= ((SMALLINT '1') * (SMALLINT '1'))) GROUP BY sq_3.col_0 HAVING true;
CREATE MATERIALIZED VIEW m3 AS SELECT (INTERVAL '86400') AS col_0, sq_1.col_0 AS col_1 FROM (SELECT hop_0.date_time AS col_0, (((INTERVAL '-1') / (817)) + DATE '2022-01-08') AS col_1 FROM hop(auction, auction.expires, INTERVAL '3600', INTERVAL '324000') AS hop_0 WHERE (false) GROUP BY hop_0.date_time HAVING CAST((INT '410') AS BOOLEAN)) AS sq_1 WHERE false GROUP BY sq_1.col_0 HAVING true;
CREATE MATERIALIZED VIEW m4 AS SELECT t_0.c16 AS col_0, (coalesce(NULL, NULL, t_1.p_retailprice, NULL, NULL, NULL, NULL, NULL, NULL, NULL)) AS col_1, t_1.p_retailprice AS col_2, t_0.c3 AS col_3 FROM alltypes2 AS t_0 JOIN part AS t_1 ON t_0.c9 = t_1.p_name WHERE t_0.c1 GROUP BY t_0.c1, t_0.c14, t_0.c3, t_0.c16, t_0.c4, t_1.p_retailprice;
CREATE MATERIALIZED VIEW m5 AS WITH with_0 AS (SELECT (INTERVAL '-86400') AS col_0, (CASE WHEN (TIMESTAMP '2022-01-08 14:31:41' IS NOT NULL) THEN TIMESTAMP '2022-01-01 14:31:42' WHEN true THEN t_3.date_time WHEN ((FLOAT '261') <= ((305) / (1108495796))) THEN t_3.date_time ELSE (DATE '2022-01-08' + (INTERVAL '0')) END) AS col_1 FROM auction AS t_3 GROUP BY t_3.seller, t_3.description, t_3.date_time HAVING false) SELECT (FLOAT '95') AS col_0, TIME '14:31:42' AS col_1, TIME '14:30:42' AS col_2, 'e23AGgxNOe' AS col_3 FROM with_0 WHERE true;
CREATE MATERIALIZED VIEW m6 AS SELECT ((SMALLINT '291') & t_0.o_orderkey) AS col_0, t_1.col_2 AS col_1, true AS col_2 FROM orders AS t_0 RIGHT JOIN m5 AS t_1 ON t_0.o_orderstatus = t_1.col_3 AND true GROUP BY t_0.o_comment, t_0.o_totalprice, t_1.col_2, t_0.o_orderdate, t_0.o_orderkey, t_1.col_1 HAVING (t_0.o_totalprice = (FLOAT '92'));
CREATE MATERIALIZED VIEW m7 AS SELECT t_2.col_0 AS col_0, t_2.col_0 AS col_1, ARRAY[(BIGINT '974')] AS col_2 FROM m6 AS t_2 WHERE t_2.col_2 GROUP BY t_2.col_0, t_2.col_1 HAVING false;
CREATE MATERIALIZED VIEW m8 AS WITH with_0 AS (SELECT t_3.col_1 AS col_0 FROM m2 AS t_3 WHERE false GROUP BY t_3.col_1 HAVING false) SELECT (REAL '605') AS col_0, (644) AS col_1, false AS col_2, (FLOAT '286') AS col_3 FROM with_0;
CREATE MATERIALIZED VIEW m9 AS SELECT (sq_1.col_3 + ((INTERVAL '-60') / (INT '95'))) AS col_0 FROM (SELECT tumble_0.date_time AS col_0, TIME '14:31:44' AS col_1, tumble_0.date_time AS col_2, tumble_0.date_time AS col_3 FROM tumble(auction, auction.expires, INTERVAL '61') AS tumble_0 WHERE false GROUP BY tumble_0.date_time) AS sq_1 WHERE true GROUP BY sq_1.col_3, sq_1.col_2 HAVING true;
