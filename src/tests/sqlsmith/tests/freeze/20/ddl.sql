CREATE TABLE supplier (s_suppkey INT, s_name CHARACTER VARYING, s_address CHARACTER VARYING, s_nationkey INT, s_phone CHARACTER VARYING, s_acctbal NUMERIC, s_comment CHARACTER VARYING, PRIMARY KEY (s_suppkey));
CREATE TABLE part (p_partkey INT, p_name CHARACTER VARYING, p_mfgr CHARACTER VARYING, p_brand CHARACTER VARYING, p_type CHARACTER VARYING, p_size INT, p_container CHARACTER VARYING, p_retailprice NUMERIC, p_comment CHARACTER VARYING, PRIMARY KEY (p_partkey));
CREATE TABLE partsupp (ps_partkey INT, ps_suppkey INT, ps_availqty INT, ps_supplycost NUMERIC, ps_comment CHARACTER VARYING, PRIMARY KEY (ps_partkey, ps_suppkey));
CREATE TABLE customer (c_custkey INT, c_name CHARACTER VARYING, c_address CHARACTER VARYING, c_nationkey INT, c_phone CHARACTER VARYING, c_acctbal NUMERIC, c_mktsegment CHARACTER VARYING, c_comment CHARACTER VARYING, PRIMARY KEY (c_custkey));
CREATE TABLE orders (o_orderkey BIGINT, o_custkey INT, o_orderstatus CHARACTER VARYING, o_totalprice NUMERIC, o_orderdate DATE, o_orderpriority CHARACTER VARYING, o_clerk CHARACTER VARYING, o_shippriority INT, o_comment CHARACTER VARYING, PRIMARY KEY (o_orderkey));
CREATE TABLE lineitem (l_orderkey BIGINT, l_partkey INT, l_suppkey INT, l_linenumber INT, l_quantity NUMERIC, l_extendedprice NUMERIC, l_discount NUMERIC, l_tax NUMERIC, l_returnflag CHARACTER VARYING, l_linestatus CHARACTER VARYING, l_shipdate DATE, l_commitdate DATE, l_receiptdate DATE, l_shipinstruct CHARACTER VARYING, l_shipmode CHARACTER VARYING, l_comment CHARACTER VARYING, PRIMARY KEY (l_orderkey, l_linenumber));
CREATE TABLE nation (n_nationkey INT, n_name CHARACTER VARYING, n_regionkey INT, n_comment CHARACTER VARYING, PRIMARY KEY (n_nationkey));
CREATE TABLE region (r_regionkey INT, r_name CHARACTER VARYING, r_comment CHARACTER VARYING, PRIMARY KEY (r_regionkey));
CREATE TABLE person (id BIGINT, name CHARACTER VARYING, email_address CHARACTER VARYING, credit_card CHARACTER VARYING, city CHARACTER VARYING, state CHARACTER VARYING, date_time TIMESTAMP, extra CHARACTER VARYING, PRIMARY KEY (id));
CREATE TABLE auction (id BIGINT, item_name CHARACTER VARYING, description CHARACTER VARYING, initial_bid BIGINT, reserve BIGINT, date_time TIMESTAMP, expires TIMESTAMP, seller BIGINT, category BIGINT, extra CHARACTER VARYING, PRIMARY KEY (id));
CREATE TABLE bid (auction BIGINT, bidder BIGINT, price BIGINT, channel CHARACTER VARYING, url CHARACTER VARYING, date_time TIMESTAMP, extra CHARACTER VARYING);
CREATE TABLE alltypes1 (c1 BOOLEAN, c2 SMALLINT, c3 INT, c4 BIGINT, c5 REAL, c6 DOUBLE, c7 NUMERIC, c8 DATE, c9 CHARACTER VARYING, c10 TIME, c11 TIMESTAMP, c13 INTERVAL, c14 STRUCT<a INT>, c15 INT[], c16 CHARACTER VARYING[]);
CREATE TABLE alltypes2 (c1 BOOLEAN, c2 SMALLINT, c3 INT, c4 BIGINT, c5 REAL, c6 DOUBLE, c7 NUMERIC, c8 DATE, c9 CHARACTER VARYING, c10 TIME, c11 TIMESTAMP, c13 INTERVAL, c14 STRUCT<a INT>, c15 INT[], c16 CHARACTER VARYING[]);
CREATE MATERIALIZED VIEW m0 AS SELECT t_1.l_returnflag AS col_0, t_1.l_orderkey AS col_1 FROM lineitem AS t_0 FULL JOIN lineitem AS t_1 ON t_0.l_discount = t_1.l_tax AND true GROUP BY t_1.l_returnflag, t_0.l_suppkey, t_0.l_orderkey, t_1.l_tax, t_0.l_returnflag, t_0.l_partkey, t_0.l_linenumber, t_0.l_receiptdate, t_1.l_shipmode, t_1.l_linenumber, t_1.l_orderkey HAVING (false IS FALSE);
CREATE MATERIALIZED VIEW m1 AS SELECT hop_0.channel AS col_0, hop_0.price AS col_1, hop_0.bidder AS col_2, hop_0.price AS col_3 FROM hop(bid, bid.date_time, INTERVAL '3600', INTERVAL '295200') AS hop_0 WHERE false GROUP BY hop_0.price, hop_0.channel, hop_0.bidder;
CREATE MATERIALIZED VIEW m2 AS SELECT (substr(t_0.p_container, (INT '687'), (INT '917'))) AS col_0, t_0.p_container AS col_1, (md5((coalesce(NULL, NULL, (lower(t_0.p_container)), NULL, NULL, NULL, NULL, NULL, NULL, NULL)))) AS col_2 FROM part AS t_0 JOIN bid AS t_1 ON t_0.p_type = t_1.extra GROUP BY t_0.p_container;
CREATE MATERIALIZED VIEW m3 AS SELECT (TIMESTAMP '2022-10-27 04:31:13') AS col_0, (SMALLINT '558') AS col_1, DATE '2022-10-20' AS col_2 FROM hop(alltypes2, alltypes2.c11, INTERVAL '3600', INTERVAL '122400') AS hop_0 WHERE hop_0.c1 GROUP BY hop_0.c2, hop_0.c4, hop_0.c13, hop_0.c1, hop_0.c11, hop_0.c3 HAVING hop_0.c1;
CREATE MATERIALIZED VIEW m4 AS SELECT t_1.c_mktsegment AS col_0, 'EqPNMrtKe3' AS col_1, (TRIM(t_0.col_2)) AS col_2, (replace('C6TeA1oP2J', t_0.col_2, (replace(t_1.c_comment, (TRIM(BOTH t_1.c_comment FROM (OVERLAY(t_1.c_name PLACING (md5(t_1.c_name)) FROM (INT '212') FOR (INT '1091755733'))))), t_1.c_mktsegment)))) AS col_3 FROM m2 AS t_0 FULL JOIN customer AS t_1 ON t_0.col_0 = t_1.c_comment AND true GROUP BY t_0.col_2, t_1.c_name, t_1.c_comment, t_1.c_mktsegment HAVING false;
CREATE MATERIALIZED VIEW m5 AS SELECT tumble_0.date_time AS col_0, TIMESTAMP '2022-10-27 05:30:14' AS col_1, tumble_0.date_time AS col_2, ((TIMESTAMP '2022-10-27 05:30:14') + (INTERVAL '-604800')) AS col_3 FROM tumble(person, person.date_time, INTERVAL '14') AS tumble_0 WHERE true GROUP BY tumble_0.date_time HAVING true;
CREATE MATERIALIZED VIEW m6 AS SELECT sq_2.col_1 AS col_0, sq_2.col_1 AS col_1 FROM (SELECT sq_1.col_0 AS col_0, (BIGINT '367') AS col_1, sq_1.col_0 AS col_2, sq_1.col_0 AS col_3 FROM (SELECT t_0.col_3 AS col_0 FROM m1 AS t_0 GROUP BY t_0.col_3) AS sq_1 GROUP BY sq_1.col_0 HAVING true) AS sq_2 GROUP BY sq_2.col_0, sq_2.col_1 HAVING true;
CREATE MATERIALIZED VIEW m7 AS SELECT (DATE '2022-10-19' - (INTERVAL '0')) AS col_0 FROM m5 AS t_0 GROUP BY t_0.col_2, t_0.col_3 HAVING false;
CREATE MATERIALIZED VIEW m8 AS SELECT sq_2.col_1 AS col_0, sq_2.col_1 AS col_1 FROM (SELECT t_0.col_2 AS col_0, t_0.col_2 AS col_1, 'MC2Sh0mHtr' AS col_2 FROM m4 AS t_0 LEFT JOIN orders AS t_1 ON t_0.col_1 = t_1.o_comment AND true WHERE false GROUP BY t_0.col_2 HAVING false) AS sq_2 WHERE true GROUP BY sq_2.col_1;
CREATE MATERIALIZED VIEW m9 AS SELECT (replace((TRIM(LEADING 'H9u48Ac7vk' FROM (substr(t_2.o_orderpriority, (INT '206'), (INT '777'))))), t_2.o_orderpriority, (concat_ws('NzYQkaAkas', 'BGKixRv7SK', (substr((TRIM((TRIM(LEADING '9jjr4sskOB' FROM t_2.o_comment)))), (INT '425'))))))) AS col_0, (split_part('S6Evw6krfA', 'GN7sa0msRz', (CASE WHEN true THEN (INT '870') WHEN false THEN (INT '-2147483648') WHEN CAST(CAST(false AS INT) AS BOOLEAN) THEN (INT '2147483647') ELSE (INT '0') END))) AS col_1 FROM orders AS t_2 GROUP BY t_2.o_comment, t_2.o_orderpriority, t_2.o_totalprice HAVING false;
