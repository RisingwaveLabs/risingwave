CREATE TABLE supplier (s_suppkey INT, s_name CHARACTER VARYING, s_address CHARACTER VARYING, s_nationkey INT, s_phone CHARACTER VARYING, s_acctbal NUMERIC, s_comment CHARACTER VARYING, PRIMARY KEY (s_suppkey));
CREATE TABLE part (p_partkey INT, p_name CHARACTER VARYING, p_mfgr CHARACTER VARYING, p_brand CHARACTER VARYING, p_type CHARACTER VARYING, p_size INT, p_container CHARACTER VARYING, p_retailprice NUMERIC, p_comment CHARACTER VARYING, PRIMARY KEY (p_partkey));
CREATE TABLE partsupp (ps_partkey INT, ps_suppkey INT, ps_availqty INT, ps_supplycost NUMERIC, ps_comment CHARACTER VARYING, PRIMARY KEY (ps_partkey, ps_suppkey));
CREATE TABLE customer (c_custkey INT, c_name CHARACTER VARYING, c_address CHARACTER VARYING, c_nationkey INT, c_phone CHARACTER VARYING, c_acctbal NUMERIC, c_mktsegment CHARACTER VARYING, c_comment CHARACTER VARYING, PRIMARY KEY (c_custkey));
CREATE TABLE orders (o_orderkey BIGINT, o_custkey INT, o_orderstatus CHARACTER VARYING, o_totalprice NUMERIC, o_orderdate DATE, o_orderpriority CHARACTER VARYING, o_clerk CHARACTER VARYING, o_shippriority INT, o_comment CHARACTER VARYING, PRIMARY KEY (o_orderkey));
CREATE TABLE lineitem (l_orderkey BIGINT, l_partkey INT, l_suppkey INT, l_linenumber INT, l_quantity NUMERIC, l_extendedprice NUMERIC, l_discount NUMERIC, l_tax NUMERIC, l_returnflag CHARACTER VARYING, l_linestatus CHARACTER VARYING, l_shipdate DATE, l_commitdate DATE, l_receiptdate DATE, l_shipinstruct CHARACTER VARYING, l_shipmode CHARACTER VARYING, l_comment CHARACTER VARYING, PRIMARY KEY (l_orderkey, l_linenumber));
CREATE TABLE nation (n_nationkey INT, n_name CHARACTER VARYING, n_regionkey INT, n_comment CHARACTER VARYING, PRIMARY KEY (n_nationkey));
CREATE TABLE region (r_regionkey INT, r_name CHARACTER VARYING, r_comment CHARACTER VARYING, PRIMARY KEY (r_regionkey));
CREATE TABLE person (id BIGINT, name CHARACTER VARYING, email_address CHARACTER VARYING, credit_card CHARACTER VARYING, city CHARACTER VARYING, state CHARACTER VARYING, date_time TIMESTAMP, extra CHARACTER VARYING, PRIMARY KEY (id));
CREATE TABLE auction (id BIGINT, item_name CHARACTER VARYING, description CHARACTER VARYING, initial_bid BIGINT, reserve BIGINT, date_time TIMESTAMP, expires TIMESTAMP, seller BIGINT, category BIGINT, extra CHARACTER VARYING, PRIMARY KEY (id));
CREATE TABLE bid (auction BIGINT, bidder BIGINT, price BIGINT, channel CHARACTER VARYING, url CHARACTER VARYING, date_time TIMESTAMP, extra CHARACTER VARYING);
CREATE TABLE alltypes1 (c1 BOOLEAN, c2 SMALLINT, c3 INT, c4 BIGINT, c5 REAL, c6 DOUBLE, c7 NUMERIC, c8 DATE, c9 CHARACTER VARYING, c10 TIME, c11 TIMESTAMP, c13 INTERVAL, c14 STRUCT<a INT>, c15 INT[], c16 CHARACTER VARYING[]);
CREATE TABLE alltypes2 (c1 BOOLEAN, c2 SMALLINT, c3 INT, c4 BIGINT, c5 REAL, c6 DOUBLE, c7 NUMERIC, c8 DATE, c9 CHARACTER VARYING, c10 TIME, c11 TIMESTAMP, c13 INTERVAL, c14 STRUCT<a INT>, c15 INT[], c16 CHARACTER VARYING[]);
CREATE MATERIALIZED VIEW m0 AS SELECT 'GJzchMq499' AS col_0 FROM person AS t_0 GROUP BY t_0.credit_card;
CREATE MATERIALIZED VIEW m1 AS SELECT (BIGINT '608') AS col_0, CAST(false AS INT) AS col_1, (INT '921') AS col_2 FROM part AS t_0 FULL JOIN customer AS t_1 ON t_0.p_comment = t_1.c_comment AND true GROUP BY t_0.p_mfgr, t_0.p_partkey HAVING ((char_length(('PJh9iLdiBO'))) = (BIGINT '573'));
CREATE MATERIALIZED VIEW m2 AS SELECT (tumble_0.seller >> (SMALLINT '681')) AS col_0, (INTERVAL '604800') AS col_1, tumble_0.seller AS col_2, tumble_0.seller AS col_3 FROM tumble(auction, auction.expires, INTERVAL '80') AS tumble_0 WHERE (false < true) GROUP BY tumble_0.seller;
CREATE MATERIALIZED VIEW m3 AS SELECT ((BIGINT '1')) AS col_0, tumble_0.expires AS col_1, tumble_0.reserve AS col_2, tumble_0.expires AS col_3 FROM tumble(auction, auction.expires, INTERVAL '30') AS tumble_0 WHERE true GROUP BY tumble_0.reserve, tumble_0.seller, tumble_0.date_time, tumble_0.expires HAVING ((INT '51320999') < tumble_0.seller);
CREATE MATERIALIZED VIEW m4 AS SELECT t_0.col_2 AS col_0, TIME '01:49:14' AS col_1 FROM m1 AS t_0 RIGHT JOIN customer AS t_1 ON t_0.col_1 = t_1.c_nationkey WHERE ((SMALLINT '5651') <> (REAL '-428469185')) GROUP BY t_0.col_2, t_1.c_name HAVING true;
CREATE MATERIALIZED VIEW m5 AS SELECT ((CASE WHEN ((REAL '318') >= (BIGINT '222')) THEN (tumble_0.bidder << (SMALLINT '782')) WHEN false THEN tumble_0.price WHEN (true) THEN tumble_0.bidder ELSE ((BIGINT '449')) END) + ((SMALLINT '697') / (SMALLINT '-65'))) AS col_0, tumble_0.channel AS col_1, tumble_0.channel AS col_2, tumble_0.price AS col_3 FROM tumble(bid, bid.date_time, INTERVAL '58') AS tumble_0 GROUP BY tumble_0.channel, tumble_0.price, tumble_0.bidder, tumble_0.extra HAVING false;
CREATE MATERIALIZED VIEW m7 AS SELECT (approx_count_distinct(TIME '01:49:15') | (INT '271')) AS col_0, t_0.col_0 AS col_1, (t_0.col_2 * t_1.auction) AS col_2, t_0.col_2 AS col_3 FROM m3 AS t_0 FULL JOIN bid AS t_1 ON t_0.col_2 = t_1.auction GROUP BY t_0.col_0, t_0.col_2, t_1.auction;
CREATE MATERIALIZED VIEW m8 AS WITH with_0 AS (SELECT TIME '01:49:14' AS col_0 FROM m4 AS t_1 WHERE CAST(((INT '2147483647') | (SMALLINT '444')) AS BOOLEAN) GROUP BY t_1.col_1) SELECT false AS col_0 FROM with_0 WHERE true;
CREATE MATERIALIZED VIEW m9 AS WITH with_0 AS (WITH with_1 AS (WITH with_2 AS (SELECT t_3.credit_card AS col_0, 'EdXRoDpygV' AS col_1 FROM person AS t_3 LEFT JOIN m2 AS t_4 ON t_3.id = t_4.col_3 GROUP BY t_3.credit_card HAVING true) SELECT ARRAY['MinhUEmbEt', '9qbmLuuVri'] AS col_0 FROM with_2) SELECT CAST((INT '980') AS BOOLEAN) AS col_0, (FLOAT '131') AS col_1, TIMESTAMP '2022-03-16 01:49:16' AS col_2, (SMALLINT '1') AS col_3 FROM with_1) SELECT (207) AS col_0 FROM with_0 WHERE ((FLOAT '915') = (SMALLINT '552'));
