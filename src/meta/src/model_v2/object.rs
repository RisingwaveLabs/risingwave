//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "object")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub oid: i32,
    pub obj_type: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::connection::Entity",
        from = "Column::Oid",
        to = "super::connection::Column::ConnectionId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Connection,
    #[sea_orm(
        belongs_to = "super::function::Entity",
        from = "Column::Oid",
        to = "super::function::Column::FunctionId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Function,
    #[sea_orm(
        belongs_to = "super::index::Entity",
        from = "Column::Oid",
        to = "super::index::Column::IndexId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Index,
    #[sea_orm(
        belongs_to = "super::sink::Entity",
        from = "Column::Oid",
        to = "super::sink::Column::SinkId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Sink,
    #[sea_orm(
        belongs_to = "super::source::Entity",
        from = "Column::Oid",
        to = "super::source::Column::SourceId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Source,
    #[sea_orm(
        belongs_to = "super::table::Entity",
        from = "Column::Oid",
        to = "super::table::Column::TableId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Table,
    #[sea_orm(has_many = "super::user_privilege::Entity")]
    UserPrivilege,
    #[sea_orm(
        belongs_to = "super::view::Entity",
        from = "Column::Oid",
        to = "super::view::Column::ViewId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    View,
}

impl Related<super::connection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Connection.def()
    }
}

impl Related<super::function::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Function.def()
    }
}

impl Related<super::index::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Index.def()
    }
}

impl Related<super::sink::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sink.def()
    }
}

impl Related<super::source::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Source.def()
    }
}

impl Related<super::table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Table.def()
    }
}

impl Related<super::user_privilege::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPrivilege.def()
    }
}

impl Related<super::view::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::View.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
