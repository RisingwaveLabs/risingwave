use sea_orm_migration::prelude::{Table as MigrationTable, *};

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .add_column(ColumnDef::new(Subscription::RetentionSeconds).big_integer())
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .add_column(ColumnDef::new(Subscription::SubscriptionState).integer())
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .add_column(ColumnDef::new(Subscription::DependentTableId).integer())
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .drop_column(Alias::new(Subscription::Columns.to_string()))
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .drop_column(Alias::new(Subscription::PlanPk.to_string()))
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .drop_column(Alias::new(Subscription::DistributionKey.to_string()))
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .drop_column(Alias::new(Subscription::Properties.to_string()))
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .drop_column(Alias::new(Subscription::SubscriptionFromName.to_string()))
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .drop_column(Alias::new(
                        Subscription::SubscriptionInternalTableName.to_string(),
                    ))
                    .to_owned(),
            )
            .await?;
        Ok(())
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .add_column(ColumnDef::new(Subscription::Columns).binary().not_null())
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .add_column(ColumnDef::new(Subscription::PlanPk).binary().not_null())
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .add_column(ColumnDef::new(Subscription::DistributionKey).json_binary())
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .add_column(ColumnDef::new(Subscription::Properties).json_binary())
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .add_column(ColumnDef::new(Subscription::SubscriptionFromName).string())
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .add_column(
                        ColumnDef::new(Subscription::SubscriptionInternalTableName).string(),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .drop_column(Alias::new(Subscription::RetentionSeconds.to_string()))
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .drop_column(Alias::new(Subscription::SubscriptionState.to_string()))
                    .to_owned(),
            )
            .await?;
        manager
            .alter_table(
                MigrationTable::alter()
                    .table(Subscription::Table)
                    .drop_column(Alias::new(Subscription::DependentTableId.to_string()))
                    .to_owned(),
            )
            .await?;
        Ok(())
    }
}

#[derive(DeriveIden)]
enum Subscription {
    Table,
    // delete
    Columns,
    PlanPk,
    DistributionKey,
    Properties,
    SubscriptionFromName,
    SubscriptionInternalTableName,
    // add
    RetentionSeconds,
    SubscriptionState,
    DependentTableId,
}
