# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- name: Left join type for temporal join
  sql: |
    create table stream(id1 int, a1 int, b1 int) APPEND ONLY;
    create table version(id2 int, a2 int, b2 int, primary key (id2));
    select id1, a1, id2, a2 from stream left join version FOR SYSTEM_TIME AS OF NOW() on id1= id2
  stream_plan: |
    StreamMaterialize { columns: [id1, a1, id2, a2, stream._row_id(hidden)], pk_columns: [stream._row_id, id2, id1], pk_conflict: "no check" }
    └─StreamTemporalJoin { type: LeftOuter, predicate: stream.id1 = version.id2, output: [stream.id1, stream.a1, version.id2, version.a2, stream._row_id] }
      ├─StreamExchange { dist: HashShard(stream.id1) }
      | └─StreamTableScan { table: stream, columns: [stream.id1, stream.a1, stream._row_id], pk: [stream._row_id], dist: UpstreamHashShard(stream._row_id) }
      └─StreamNoShuffleExchange { dist: UpstreamHashShard(version.id2) }
        └─StreamTableScan { table: version, columns: [version.id2, version.a2], pk: [version.id2], dist: UpstreamHashShard(version.id2) }
  batch_error: |-
    Not supported: do not support temporal join for batch queries
    HINT: please use temporal join in streaming queries
- name: Inner join type for temporal join
  sql: |
    create table stream(id1 int, a1 int, b1 int) APPEND ONLY;
    create table version(id2 int, a2 int, b2 int, primary key (id2));
    select id1, a1, id2, a2 from stream join version FOR SYSTEM_TIME AS OF NOW() on id1 = id2 where a2 < 10;
  stream_plan: |
    StreamMaterialize { columns: [id1, a1, id2, a2, stream._row_id(hidden)], pk_columns: [stream._row_id, id2, id1], pk_conflict: "no check" }
    └─StreamTemporalJoin { type: Inner, predicate: stream.id1 = version.id2 AND (version.a2 < 10:Int32), output: [stream.id1, stream.a1, version.id2, version.a2, stream._row_id] }
      ├─StreamExchange { dist: HashShard(stream.id1) }
      | └─StreamTableScan { table: stream, columns: [stream.id1, stream.a1, stream._row_id], pk: [stream._row_id], dist: UpstreamHashShard(stream._row_id) }
      └─StreamNoShuffleExchange { dist: UpstreamHashShard(version.id2) }
        └─StreamTableScan { table: version, columns: [version.id2, version.a2], pk: [version.id2], dist: UpstreamHashShard(version.id2) }
- name: Multi join key for temporal join
  sql: |
    create table stream(id1 int, a1 int, b1 int) APPEND ONLY;
    create table version(id2 int, a2 int, b2 int, primary key (id2, a2));
    select id1, a1, id2, a2 from stream left join version FOR SYSTEM_TIME AS OF NOW() on a1 = a2 and id1 = id2 where b2 != a2;
  stream_plan: |
    StreamMaterialize { columns: [id1, a1, id2, a2, stream._row_id(hidden)], pk_columns: [stream._row_id, id2, a2, id1, a1], pk_conflict: "no check" }
    └─StreamTemporalJoin { type: Inner, predicate: stream.id1 = version.id2 AND stream.a1 = version.a2 AND (version.b2 <> version.a2), output: [stream.id1, stream.a1, version.id2, version.a2, stream._row_id] }
      ├─StreamExchange { dist: HashShard(stream.id1, stream.a1) }
      | └─StreamTableScan { table: stream, columns: [stream.id1, stream.a1, stream._row_id], pk: [stream._row_id], dist: UpstreamHashShard(stream._row_id) }
      └─StreamNoShuffleExchange { dist: UpstreamHashShard(version.id2, version.a2) }
        └─StreamTableScan { table: version, columns: [version.id2, version.a2, version.b2], pk: [version.id2, version.a2], dist: UpstreamHashShard(version.id2, version.a2) }
- name: Temporal join with Aggregation
  sql: |
    create table stream(id1 int, a1 int, b1 int) APPEND ONLY;
    create table version(id2 int, a2 int, b2 int, primary key (id2));
    select count(*) from stream left join version FOR SYSTEM_TIME AS OF NOW() on id1 = id2 where a2 < 10;
  stream_plan: |
    StreamMaterialize { columns: [count], pk_columns: [], pk_conflict: "no check" }
    └─StreamProject { exprs: [sum0(count)] }
      └─StreamAppendOnlyGlobalSimpleAgg { aggs: [sum0(count), count] }
        └─StreamExchange { dist: Single }
          └─StreamStatelessLocalSimpleAgg { aggs: [count] }
            └─StreamTemporalJoin { type: Inner, predicate: stream.id1 = version.id2 AND (version.a2 < 10:Int32), output: [stream._row_id, stream.id1, version.id2] }
              ├─StreamExchange { dist: HashShard(stream.id1) }
              | └─StreamTableScan { table: stream, columns: [stream.id1, stream._row_id], pk: [stream._row_id], dist: UpstreamHashShard(stream._row_id) }
              └─StreamNoShuffleExchange { dist: UpstreamHashShard(version.id2) }
                └─StreamTableScan { table: version, columns: [version.id2, version.a2], pk: [version.id2], dist: UpstreamHashShard(version.id2) }
- name: Temporal join join keys requirement test
  sql: |
    create table stream(id1 int, a1 int, b1 int) APPEND ONLY;
    create table version(id2 int, a2 int, b2 int, primary key (id2, a2));
    select id1, a1, id2, a2 from stream left join version FOR SYSTEM_TIME AS OF NOW() on id1 = id2 where a2 < 10;
  stream_error: |-
    Not supported: Temporal join requires the lookup table's primary key contained exactly in the equivalence condition
    HINT: Please add the primary key of the lookup table to the join condition and remove any other conditions
- name: Temporal join append only test
  sql: |
    create table stream(id1 int, a1 int, b1 int);
    create table version(id2 int, a2 int, b2 int, primary key (id2));
    select id1, a1, id2, a2 from stream left join version FOR SYSTEM_TIME AS OF NOW() on id1 = id2 where a2 < 10;
  stream_error: |-
    Not supported: Temporal join requires a append-only left input
    HINT: Please ensure your left input is append-only
- name: Temporal join type test
  sql: |
    create table stream(id1 int, a1 int, b1 int);
    create table version(id2 int, a2 int, b2 int, primary key (id2));
    select id1, a1, id2, a2 from stream right join version FOR SYSTEM_TIME AS OF NOW() on id1 = id2 where a2 < 10;
  stream_error: |-
    Not supported: exist dangling temporal scan
    HINT: please check your temporal join syntax e.g. consider removing the right outer join if it is being used.
