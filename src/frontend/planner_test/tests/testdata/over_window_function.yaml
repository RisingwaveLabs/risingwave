# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- sql: |
    create table t(x int);
    select sum(x) over() from t;
  binder_error: |-
    Feature is not yet implemented: aggregate function as over window function: sum
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/4978
- sql: |
    create table t(x int);
    select row_number(x) over() from t;
  binder_error: 'Bind error: the length of args of ROW_NUMBER function should be 0'
- sql: |
    create table t(x int);
    select row_number() over() from t;
  planner_error: 'Invalid input syntax: window rank function without order by: ROW_NUMBER()
    OVER()'
- sql: |
    create table t(x int);
    select row_number() over(PARTITION BY x ORDER BY x) from t;
  logical_plan: |
    LogicalProject { exprs: [ROW_NUMBER] }
      LogicalOverAgg { window_function: ROW_NUMBER() OVER(PARTITION BY t.x ORDER BY t.x ASC NULLS LAST) }
        LogicalScan { table: t, columns: [t.x, t._row_id] }
- sql: |
    create table t(x int);
    select row_number() over(PARTITION BY x ORDER BY x ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) from t;
  binder_error: |-
    Feature is not yet implemented: window frame: ROWS BETWEEN 10 PRECEDING AND CURRENT ROW
    No tracking issue yet. Feel free to submit a feature request at https://github.com/risingwavelabs/risingwave/issues/new?labels=type%2Ffeature&template=feature_request.yml
- sql: |
    create table t(x int);
    select row_number() over(ORDER BY x), row_number() over(ORDER BY x) from t;
  planner_error: |-
    Feature is not yet implemented: Multiple window functions
    No tracking issue yet. Feel free to submit a feature request at https://github.com/risingwavelabs/risingwave/issues/new?labels=type%2Ffeature&template=feature_request.yml
- sql: |
    create table t(x int);
    select 1+row_number() over(ORDER BY x) from t;
  planner_error: |-
    Feature is not yet implemented: window function in expression: (1:Int32 + ROW_NUMBER() OVER(ORDER BY $0))
    No tracking issue yet. Feel free to submit a feature request at https://github.com/risingwavelabs/risingwave/issues/new?labels=type%2Ffeature&template=feature_request.yml
- sql: |
    create table t(x int);
    select * from t order by (row_number() over(PARTITION BY x ORDER BY x));
  logical_plan: |
    LogicalProject { exprs: [t.x] }
      LogicalProject { exprs: [t.x, ROW_NUMBER] }
        LogicalOverAgg { window_function: ROW_NUMBER() OVER(PARTITION BY t.x ORDER BY t.x ASC NULLS LAST) }
          LogicalScan { table: t, columns: [t.x, t._row_id] }
- sql: |
    create table t(x int);
    select x from t group by (row_number(x) over());
  binder_error: 'Invalid input syntax: window functions are not allowed in GROUP BY'
- sql: |
    create table t(x int);
    select x from t having (row_number(x) over() > 1);
  binder_error: 'Invalid input syntax: window functions are not allowed in HAVING'
- sql: |
    create table t(x int);
    select x from t where (row_number(x) over() > 1);
  binder_error: 'Invalid input syntax: window functions are not allowed in WHERE'
- sql: |
    create table t(x int);
    select sum(x) filter (where row_number() over () > 1) from t;
  binder_error: 'Invalid input syntax: window functions are not allowed in FILTER'
- sql: |
    /* TopN with rank output */
    create table t(x int);
    select * from
      (select *, row_number() over(PARTITION BY x ORDER BY x) rank from t)
    where rank<3;
  logical_plan: |
    LogicalProject { exprs: [t.x, ROW_NUMBER] }
      LogicalFilter { predicate: (ROW_NUMBER < 3:Int32) }
        LogicalProject { exprs: [t.x, ROW_NUMBER] }
          LogicalOverAgg { window_function: ROW_NUMBER() OVER(PARTITION BY t.x ORDER BY t.x ASC NULLS LAST) }
            LogicalScan { table: t, columns: [t.x, t._row_id] }
  optimizer_error: |
    internal error: OverAgg can not be transformed. Plan:
    LogicalFilter { predicate: (ROW_NUMBER < 3:Int32) }
      LogicalProject { exprs: [t.x, ROW_NUMBER] }
        LogicalOverAgg { window_function: ROW_NUMBER() OVER(PARTITION BY t.x ORDER BY t.x ASC NULLS LAST) }
          LogicalScan { table: t, columns: [t.x, t._row_id] }
- sql: |
    /* TopN without rank output */
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where rank<3 AND x>y;
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y] }
      LogicalFilter { predicate: (ROW_NUMBER < 3:Int32) AND (t.x > t.y) }
        LogicalProject { exprs: [t.x, t.y, ROW_NUMBER] }
          LogicalOverAgg { window_function: ROW_NUMBER() OVER(PARTITION BY t.y ORDER BY t.x ASC NULLS LAST) }
            LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
  optimized_logical_plan: |
    LogicalProject { exprs: [t.x, t.y] }
      LogicalTopN { order: "[t.x ASC]", limit: 2, offset: 0, group_key: [1] }
        LogicalScan { table: t, output_columns: [t.x, t.y, t._row_id], required_columns: [x, y, _row_id], predicate: (t.x > t.y) }
  stream_plan: |
    StreamMaterialize { columns: [x, y, t._row_id(hidden)], pk_columns: [t._row_id] }
      StreamExchange { dist: HashShard(t._row_id) }
        StreamProject { exprs: [t.x, t.y, t._row_id] }
          StreamGroupTopN { order: "[t.x ASC]", limit: 2, offset: 0, group_key: [1] }
            StreamExchange { dist: HashShard(t.y) }
              StreamFilter { predicate: (t.x > t.y) }
                StreamTableScan { table: t, columns: [t.x, t.y, t._row_id], pk: [t._row_id], distribution: UpstreamHashShard(t._row_id) }
  batch_error: |-
    Feature is not yet implemented: Group TopN in batch mode
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/4847
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where rank<=3;
  optimized_logical_plan: |
    LogicalProject { exprs: [t.x, t.y] }
      LogicalTopN { order: "[t.x ASC]", limit: 3, offset: 0, group_key: [1] }
        LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where rank>3;
  optimized_logical_plan: |
    LogicalProject { exprs: [t.x, t.y] }
      LogicalTopN { order: "[t.x ASC]", limit: 9223372036854775807, offset: 3, group_key: [1] }
        LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
  stream_error: 'Invalid input syntax: OFFSET without LIMIT in streaming mode'
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where rank>=3;
  optimized_logical_plan: |
    LogicalProject { exprs: [t.x, t.y] }
      LogicalTopN { order: "[t.x ASC]", limit: 9223372036854775807, offset: 2, group_key: [1] }
        LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where 3 <= rank AND rank <= 5;
    -- complex rank range is not supported yet
  optimizer_error: |
    internal error: OverAgg can not be transformed. Plan:
    LogicalProject { exprs: [t.x, t.y] }
      LogicalFilter { predicate: (3:Int32 <= ROW_NUMBER) AND (ROW_NUMBER <= 5:Int32) }
        LogicalProject { exprs: [t.x, t.y, ROW_NUMBER] }
          LogicalOverAgg { window_function: ROW_NUMBER() OVER(PARTITION BY t.y ORDER BY t.x ASC NULLS LAST) }
            LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
