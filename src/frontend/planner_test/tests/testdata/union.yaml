# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create table t2 (a int, b numeric, c bigint);
    select * from t1 union all select * from t2;
  batch_plan: |
    BatchUnion { all: true }
    ├─BatchExchange { order: [], dist: Single }
    | └─BatchScan { table: t1, columns: [t1.a, t1.b, t1.c], distribution: SomeShard }
    └─BatchExchange { order: [], dist: Single }
      └─BatchScan { table: t2, columns: [t2.a, t2.b, t2.c], distribution: SomeShard }
  stream_plan: |
    StreamMaterialize { columns: [a, b, c, t1._row_id(hidden), null:Int64(hidden), 0:Int32(hidden)], pk_columns: [t1._row_id, null:Int64, 0:Int32] }
    └─StreamUnion { all: true }
      ├─StreamExchange { dist: Single }
      | └─StreamProject { exprs: [t1.a, t1.b, t1.c, t1._row_id, null:Int64, 0:Int32] }
      |   └─StreamTableScan { table: t1, columns: [t1.a, t1.b, t1.c, t1._row_id], pk: [t1._row_id], dist: UpstreamHashShard(t1._row_id) }
      └─StreamExchange { dist: Single }
        └─StreamProject { exprs: [t2.a, t2.b, t2.c, null:Int64, t2._row_id, 1:Int32] }
          └─StreamTableScan { table: t2, columns: [t2.a, t2.b, t2.c, t2._row_id], pk: [t2._row_id], dist: UpstreamHashShard(t2._row_id) }
  stream_dist_plan: |
    Fragment 0
      StreamMaterialize { columns: [a, b, c, t1._row_id(hidden), null:Int64(hidden), 0:Int32(hidden)], pk_columns: [t1._row_id, null:Int64, 0:Int32] }
          materialized table: 4294967294
        StreamUnion { all: true }
          StreamExchange Single from 1
          StreamExchange Single from 2

    Fragment 1
      StreamProject { exprs: [t1.a, t1.b, t1.c, t1._row_id, null:Int64, 0:Int32] }
        Chain { table: t1, columns: [t1.a, t1.b, t1.c, t1._row_id], pk: [t1._row_id], dist: UpstreamHashShard(t1._row_id) }
          Upstream
          BatchPlanNode

    Fragment 2
      StreamProject { exprs: [t2.a, t2.b, t2.c, null:Int64, t2._row_id, 1:Int32] }
        Chain { table: t2, columns: [t2.a, t2.b, t2.c, t2._row_id], pk: [t2._row_id], dist: UpstreamHashShard(t2._row_id) }
          Upstream
          BatchPlanNode

     Table 4294967294 { columns: [a, b, c, t1._row_id, null:Int64, 0:Int32], primary key: [$3 ASC, $4 ASC, $5 ASC], value indices: [0, 1, 2, 3, 4, 5], distribution key: [] }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create table t2 (a int, b numeric, c bigint);
    select * from t1 union select * from t2;
  optimized_logical_plan: |
    LogicalAgg { group_key: [t1.a, t1.b, t1.c], aggs: [] }
    └─LogicalUnion { all: true }
      ├─LogicalScan { table: t1, columns: [t1.a, t1.b, t1.c] }
      └─LogicalScan { table: t2, columns: [t2.a, t2.b, t2.c] }
  batch_plan: |
    BatchExchange { order: [], dist: Single }
    └─BatchHashAgg { group_key: [t1.a, t1.b, t1.c], aggs: [] }
      └─BatchExchange { order: [], dist: HashShard(t1.a, t1.b, t1.c) }
        └─BatchUnion { all: true }
          ├─BatchExchange { order: [], dist: Single }
          | └─BatchScan { table: t1, columns: [t1.a, t1.b, t1.c], distribution: SomeShard }
          └─BatchExchange { order: [], dist: Single }
            └─BatchScan { table: t2, columns: [t2.a, t2.b, t2.c], distribution: SomeShard }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create table t2 (a int, b numeric, c bigint);
    (select * from t1 limit 1) union (select * from t2 limit 1);
  optimized_logical_plan: |
    LogicalAgg { group_key: [t1.a, t1.b, t1.c], aggs: [] }
    └─LogicalUnion { all: true }
      ├─LogicalLimit { limit: 1, offset: 0 }
      | └─LogicalScan { table: t1, columns: [t1.a, t1.b, t1.c] }
      └─LogicalLimit { limit: 1, offset: 0 }
        └─LogicalScan { table: t2, columns: [t2.a, t2.b, t2.c] }
  batch_plan: |
    BatchExchange { order: [], dist: Single }
    └─BatchHashAgg { group_key: [t1.a, t1.b, t1.c], aggs: [] }
      └─BatchExchange { order: [], dist: HashShard(t1.a, t1.b, t1.c) }
        └─BatchUnion { all: true }
          ├─BatchLimit { limit: 1, offset: 0 }
          | └─BatchExchange { order: [], dist: Single }
          |   └─BatchLimit { limit: 1, offset: 0 }
          |     └─BatchScan { table: t1, columns: [t1.a, t1.b, t1.c], distribution: SomeShard }
          └─BatchLimit { limit: 1, offset: 0 }
            └─BatchExchange { order: [], dist: Single }
              └─BatchLimit { limit: 1, offset: 0 }
                └─BatchScan { table: t2, columns: [t2.a, t2.b, t2.c], distribution: SomeShard }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create table t2 (a int, b numeric, c bigint);
    select a from ((select * from t1 limit 1) union (select * from t2 limit 1)) T;
  optimized_logical_plan: |
    LogicalAgg { group_key: [t1.a], aggs: [] }
    └─LogicalUnion { all: true }
      ├─LogicalLimit { limit: 1, offset: 0 }
      | └─LogicalScan { table: t1, columns: [t1.a] }
      └─LogicalLimit { limit: 1, offset: 0 }
        └─LogicalScan { table: t2, columns: [t2.a] }
  batch_plan: |
    BatchExchange { order: [], dist: Single }
    └─BatchHashAgg { group_key: [t1.a], aggs: [] }
      └─BatchExchange { order: [], dist: HashShard(t1.a) }
        └─BatchUnion { all: true }
          ├─BatchLimit { limit: 1, offset: 0 }
          | └─BatchExchange { order: [], dist: Single }
          |   └─BatchLimit { limit: 1, offset: 0 }
          |     └─BatchScan { table: t1, columns: [t1.a], distribution: SomeShard }
          └─BatchLimit { limit: 1, offset: 0 }
            └─BatchExchange { order: [], dist: Single }
              └─BatchLimit { limit: 1, offset: 0 }
                └─BatchScan { table: t2, columns: [t2.a], distribution: SomeShard }
- sql: |
    select 1 union all select 1
  optimized_logical_plan: |
    LogicalUnion { all: true }
    ├─LogicalProject { exprs: [1:Int32] }
    | └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
    └─LogicalProject { exprs: [1:Int32] }
      └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
  batch_plan: |
    BatchUnion { all: true }
    ├─BatchProject { exprs: [1:Int32] }
    | └─BatchValues { rows: [[]] }
    └─BatchProject { exprs: [1:Int32] }
      └─BatchValues { rows: [[]] }
