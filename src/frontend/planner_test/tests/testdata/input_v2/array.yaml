- sql: |
    values (ARRAY['foo', 'bar']);
  output_fields:
  - batch_plan
  - logical_plan
- sql: |
    values (ARRAY[1, 2+3, 4*5+1]);
  output_fields:
  - batch_plan
  - logical_plan
- sql: |
    create table t (v1 int);
    select (ARRAY[1, v1]) from t;
  output_fields:
  - logical_plan
  - batch_plan
- sql: |
    select ARRAY[null];
  output_fields:
  - logical_plan
- sql: |
    select ARRAY[];
  output_fields:
  - binder_error
- sql: |
    select ARRAY[]::int[];
  output_fields:
  - logical_plan
- sql: |
    select ARRAY[]::int[][];
  output_fields:
  - logical_plan
- sql: |
    select ARRAY[]::int;
  output_fields:
  - binder_error
- sql: |
    select array_cat(array[66], array[123]);
  output_fields:
  - batch_plan
  - logical_plan
- sql: |
    select array_cat(array[array[66]], array[233]);
  output_fields:
  - logical_plan
  - batch_plan
- sql: |
    select array_cat(array[233], array[array[66]]);
  output_fields:
  - batch_plan
  - logical_plan
- sql: |
    select array_cat(array[233], array[array[array[66]]]);
  output_fields:
  - binder_error
- sql: |
    select array_cat(array[233], 123);
  output_fields:
  - binder_error
- sql: |
    select array_cat(123, array[233]);
  output_fields:
  - binder_error
- sql: |
    select array_append(array[66], 123);
  output_fields:
  - batch_plan
  - logical_plan
- sql: |
    select array_append(123, 234);
  output_fields:
  - binder_error
- sql: |
    /* Combining multidimensional arrays as such is supported beyond what PostgresSQL allows */
    select array_append(array[array[66]], array[233]);
  output_fields:
  - logical_plan
- sql: |
    select array_prepend(123, array[66]);
  output_fields:
  - batch_plan
  - logical_plan
- sql: |
    select array_prepend(123, 234);
  output_fields:
  - binder_error
- sql: |
    select array_prepend(array[233], array[array[66]]);
  output_fields:
  - logical_plan
- name: string from/to varchar[] in implicit context
  sql: |
    values (array['a', 'b']), ('{c,' || 'd}');
  output_fields:
  - binder_error
- name: string to varchar[] in assign context
  sql: |
    create table t (v1 varchar[]);
    insert into t values ('{c,' || 'd}');
  output_fields:
  - binder_error
- name: string to varchar[] in explicit context
  sql: |
    select ('{c,' || 'd}')::varchar[];
  output_fields:
  - logical_plan
- name: unknown to varchar[] in implicit context
  sql: |
    values (array['a', 'b']), ('{c,d}');
  output_fields:
  - logical_plan
- name: unknown to varchar[] in assign context
  sql: |
    create table t (v1 varchar[]);
    insert into t values ('{c,d}');
  output_fields:
  - logical_plan
- name: unknown to varchar[] in explicit context
  sql: |
    select ('{c,d}')::varchar[];
  output_fields:
  - logical_plan
- name: varchar[] to string in assign context
  sql: |
    create table t (v1 varchar);
    insert into t values (array['a', 'b']);
  output_fields:
  - logical_plan
- name: varchar[] to string in explicit context
  sql: |
    select array['a', 'b']::varchar;
  output_fields:
  - logical_plan
- name: bool[] cast in explicit context
  sql: |
    select array[1, true]::bool[];
  output_fields:
  - logical_plan
- name: bool[][] cast in explicit context
  sql: |
    select array[array[1, true]]::bool[][];
  output_fields:
  - logical_plan
- name: compare with null
  sql: |
    select null = array[1];
  output_fields:
  - logical_plan
- name: compare with literal
  sql: |
    select array[1] = '{1}';
  output_fields:
  - logical_plan
- name: compare with different type
  sql: |
    select array[1] = array[1.2];
  output_fields:
  - binder_error
