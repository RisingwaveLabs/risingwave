# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- name: Temporal filter works on complex columns on LHS
  sql: |
    create table t1 (ts timestamp with time zone);
    select * from t1 where ts + interval '1 hour' > now();
  stream_plan: |
    StreamMaterialize { columns: [ts, t1._row_id(hidden)], pk_columns: [t1._row_id] }
    └─StreamProject { exprs: [t1.ts, t1._row_id] }
      └─StreamDynamicFilter { predicate: ($expr12 > now), output: [t1.ts, $expr12, t1._row_id] }
        ├─StreamProject { exprs: [t1.ts, (t1.ts + '01:00:00':Interval) as $expr12, t1._row_id] }
        | └─StreamTableScan { table: t1, columns: [t1.ts, t1._row_id], pk: [t1._row_id], dist: UpstreamHashShard(t1._row_id) }
        └─StreamExchange { dist: Broadcast }
          └─StreamNow { output: [now] }
- name: Temporal filter works on complex columns on LHS (part 2)
  sql: |
    create table t1 (ts timestamp with time zone, time_to_live interval);
    select * from t1 where ts + time_to_live * 1.5 > now();
  stream_plan: |
    StreamMaterialize { columns: [ts, time_to_live, t1._row_id(hidden)], pk_columns: [t1._row_id] }
    └─StreamProject { exprs: [t1.ts, t1.time_to_live, t1._row_id] }
      └─StreamDynamicFilter { predicate: ($expr12 > now), output: [t1.ts, t1.time_to_live, $expr12, t1._row_id] }
        ├─StreamProject { exprs: [t1.ts, t1.time_to_live, (t1.ts + (t1.time_to_live * 1.5:Decimal)) as $expr12, t1._row_id] }
        | └─StreamTableScan { table: t1, columns: [t1.ts, t1.time_to_live, t1._row_id], pk: [t1._row_id], dist: UpstreamHashShard(t1._row_id) }
        └─StreamExchange { dist: Broadcast }
          └─StreamNow { output: [now] }
- name: Temporal filter works on complex columns on LHS (part 2, flipped)
  sql: |
    create table t1 (ts timestamp with time zone, additional_time_to_live interval);
    select * from t1 where now() - interval '15 minutes' < ts + additional_time_to_live * 1.5;
  stream_plan: |
    StreamMaterialize { columns: [ts, additional_time_to_live, t1._row_id(hidden)], pk_columns: [t1._row_id] }
    └─StreamProject { exprs: [t1.ts, t1.additional_time_to_live, t1._row_id] }
      └─StreamDynamicFilter { predicate: ($expr23 > $expr24), output: [t1.ts, t1.additional_time_to_live, $expr23, t1._row_id] }
        ├─StreamProject { exprs: [t1.ts, t1.additional_time_to_live, (t1.ts + (t1.additional_time_to_live * 1.5:Decimal)) as $expr23, t1._row_id] }
        | └─StreamTableScan { table: t1, columns: [t1.ts, t1.additional_time_to_live, t1._row_id], pk: [t1._row_id], dist: UpstreamHashShard(t1._row_id) }
        └─StreamExchange { dist: Broadcast }
          └─StreamProject { exprs: [(now - '00:15:00':Interval) as $expr24], watermark_columns: [(now - '00:15:00':Interval)] }
            └─StreamNow { output: [now] }
- name: Temporal filter fails without `now()` in lower bound
  sql: |-
    create table t1 (ts timestamp with time zone);
    select * from t1 where now() - interval '15 minutes' > ts;
  stream_error: 'internal error: All `now()` exprs were valid, but the condition must have at least one now expr as a lower bound.'
- name: Temporal filter reorders now expressions correctly
  sql: |
    create table t1 (ts timestamp with time zone);
    select * from t1 where ts < now() - interval '1 hour' and ts >= now() - interval '2 hour';
  stream_plan: |
    StreamMaterialize { columns: [ts, t1._row_id(hidden)], pk_columns: [t1._row_id] }
    └─StreamDynamicFilter { predicate: (t1.ts < $expr24), output: [t1.ts, t1._row_id] }
      ├─StreamDynamicFilter { predicate: (t1.ts >= $expr23), output: [t1.ts, t1._row_id] }
      | ├─StreamTableScan { table: t1, columns: [t1.ts, t1._row_id], pk: [t1._row_id], dist: UpstreamHashShard(t1._row_id) }
      | └─StreamExchange { dist: Broadcast }
      |   └─StreamProject { exprs: [(now - '02:00:00':Interval) as $expr23], watermark_columns: [(now - '02:00:00':Interval)] }
      |     └─StreamNow { output: [now] }
      └─StreamExchange { dist: Broadcast }
        └─StreamProject { exprs: [(now - '01:00:00':Interval) as $expr24], watermark_columns: [(now - '01:00:00':Interval)] }
          └─StreamNow { output: [now] }
