- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x>(select min(x) from t2 where t1.y=t2.y)
  logical_plan: |
    LogicalProject { exprs: [$1, $2], expr_alias: [x, y] }
      LogicalFilter { predicate: ($1 > $3) }
        LogicalApply { type: LeftOuter }
          LogicalScan { table: t1, columns: [_row_id#0, x, y] }
          LogicalProject { exprs: [$0], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [min($0)] }
              LogicalProject { exprs: [$1], expr_alias: [ ] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, depth: 1 } = $2) }
                  LogicalScan { table: t2, columns: [_row_id#0, x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x>(select min(x) from t2 where t2.y = (select t1.y))
  logical_plan: |
    LogicalProject { exprs: [$1, $2], expr_alias: [x, y] }
      LogicalFilter { predicate: ($1 > $3) }
        LogicalApply { type: LeftOuter }
          LogicalScan { table: t1, columns: [_row_id#0, x, y] }
          LogicalProject { exprs: [$0], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [min($0)] }
              LogicalProject { exprs: [$1], expr_alias: [ ] }
                LogicalFilter { predicate: ($2 = $3) }
                  LogicalApply { type: LeftOuter }
                    LogicalScan { table: t2, columns: [_row_id#0, x, y] }
                    LogicalProject { exprs: [CorrelatedInputRef { index: 2, depth: 2 }], expr_alias: [y] }
                      LogicalValues { rows: [[]], schema: Schema { fields: [] } }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where x>(select min(x) from t2 where t1.y=t2.y and t1.x=(select max(x) from t3, (select 1) as dummy where t3.y=t1.y))
  logical_plan: |
    LogicalProject { exprs: [$1, $2], expr_alias: [x, y] }
      LogicalFilter { predicate: ($1 > $3) }
        LogicalApply { type: LeftOuter }
          LogicalScan { table: t1, columns: [_row_id#0, x, y] }
          LogicalProject { exprs: [$0], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [min($0)] }
              LogicalProject { exprs: [$1], expr_alias: [ ] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, depth: 1 } = $2) AND (CorrelatedInputRef { index: 1, depth: 1 } = $3) }
                  LogicalApply { type: LeftOuter }
                    LogicalScan { table: t2, columns: [_row_id#0, x, y] }
                    LogicalProject { exprs: [$0], expr_alias: [ ] }
                      LogicalAgg { group_keys: [], agg_calls: [max($0)] }
                        LogicalProject { exprs: [$1], expr_alias: [ ] }
                          LogicalFilter { predicate: ($2 = CorrelatedInputRef { index: 2, depth: 2 }) }
                            LogicalJoin { type: Inner, on: always }
                              LogicalScan { table: t3, columns: [_row_id#0, x, y] }
                              LogicalProject { exprs: [1:Int32], expr_alias: [ ] }
                                LogicalValues { rows: [[]], schema: Schema { fields: [] } }
