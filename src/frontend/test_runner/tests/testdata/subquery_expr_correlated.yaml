- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select 1.5 * min(x) from t2 where t1.y=t2.y and t2.y = 1000)
  logical_plan: |
    LogicalProject { exprs: [$1, $2], expr_alias: [x, y] }
      LogicalFilter { predicate: ($1 > $3) }
        LogicalApply { type: LeftOuter, on: always }
          LogicalScan { table: t1, columns: [_row_id#0, x, y] }
          LogicalProject { exprs: [(1.5:Decimal * $0)], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [min($0)] }
              LogicalProject { exprs: [$1], expr_alias: [ ] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, depth: 1 } = $2) AND ($2 = 1000:Int32) }
                  LogicalScan { table: t2, columns: [_row_id#0, x, y] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0, $1], expr_alias: [x, y] }
      LogicalFilter { predicate: ($0 > (1.5:Decimal * $2)) }
        LogicalProject { exprs: [$1, $2, $3], expr_alias: [ ,  ,  ] }
          LogicalAgg { group_keys: [0, 1, 2], agg_calls: [min($3)] }
            LogicalProject { exprs: [$0, $1, $2, $3], expr_alias: [ ,  ,  ,  ] }
              LogicalJoin { type: LeftOuter, on: ($2 = $4) }
                LogicalScan { table: t1, columns: [_row_id#0, x, y] }
                LogicalFilter { predicate: ($1 = 1000:Int32) }
                  LogicalScan { table: t2, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x>(select min(x) from t2 where t2.y = (select t1.y))
  logical_plan: |
    LogicalProject { exprs: [$1, $2], expr_alias: [x, y] }
      LogicalFilter { predicate: ($1 > $3) }
        LogicalApply { type: LeftOuter, on: always }
          LogicalScan { table: t1, columns: [_row_id#0, x, y] }
          LogicalProject { exprs: [$0], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [min($0)] }
              LogicalProject { exprs: [$1], expr_alias: [ ] }
                LogicalFilter { predicate: ($2 = $3) }
                  LogicalApply { type: LeftOuter, on: always }
                    LogicalScan { table: t2, columns: [_row_id#0, x, y] }
                    LogicalProject { exprs: [CorrelatedInputRef { index: 2, depth: 2 }], expr_alias: [y] }
                      LogicalValues { rows: [[]], schema: Schema { fields: [] } }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where x>(select min(x) from t2 where t1.y=t2.y and t1.x=(select max(x) from t3, (select 1) as dummy where t3.y=t1.y))
  logical_plan: |
    LogicalProject { exprs: [$1, $2], expr_alias: [x, y] }
      LogicalFilter { predicate: ($1 > $3) }
        LogicalApply { type: LeftOuter, on: always }
          LogicalScan { table: t1, columns: [_row_id#0, x, y] }
          LogicalProject { exprs: [$0], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [min($0)] }
              LogicalProject { exprs: [$1], expr_alias: [ ] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, depth: 1 } = $2) AND (CorrelatedInputRef { index: 1, depth: 1 } = $3) }
                  LogicalApply { type: LeftOuter, on: always }
                    LogicalScan { table: t2, columns: [_row_id#0, x, y] }
                    LogicalProject { exprs: [$0], expr_alias: [ ] }
                      LogicalAgg { group_keys: [], agg_calls: [max($0)] }
                        LogicalProject { exprs: [$1], expr_alias: [ ] }
                          LogicalFilter { predicate: ($2 = CorrelatedInputRef { index: 2, depth: 2 }) }
                            LogicalJoin { type: Inner, on: always }
                              LogicalScan { table: t3, columns: [_row_id#0, x, y] }
                              LogicalProject { exprs: [1:Int32], expr_alias: [ ] }
                                LogicalValues { rows: [[]], schema: Schema { fields: [] } }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where exists(select * from t2 where y = 100 and t1.x = t2.x and x = 1000 and t1.y = t2.y);
  logical_plan: |
    LogicalProject { exprs: [$1, $2], expr_alias: [x, y] }
      LogicalApply { type: LeftSemi, on: always }
        LogicalScan { table: t1, columns: [_row_id#0, x, y] }
        LogicalProject { exprs: [$1, $2], expr_alias: [x, y] }
          LogicalFilter { predicate: ($2 = 100:Int32) AND (CorrelatedInputRef { index: 1, depth: 1 } = $1) AND ($1 = 1000:Int32) AND (CorrelatedInputRef { index: 2, depth: 1 } = $2) }
            LogicalScan { table: t2, columns: [_row_id#0, x, y] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0, $1], expr_alias: [x, y] }
      LogicalJoin { type: LeftSemi, on: ($0 = $2) AND ($1 = $3) }
        LogicalScan { table: t1, columns: [x, y] }
        LogicalFilter { predicate: ($1 = 100:Int32) AND ($0 = 1000:Int32) }
          LogicalScan { table: t2, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select 1.5 * min(x) from t2 where t1.y = t2.y);
  logical_plan: |
    LogicalProject { exprs: [$1, $2], expr_alias: [x, y] }
      LogicalFilter { predicate: ($1 > $3) }
        LogicalApply { type: LeftOuter, on: always }
          LogicalScan { table: t1, columns: [_row_id#0, x, y] }
          LogicalProject { exprs: [(1.5:Decimal * $0)], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [min($0)] }
              LogicalProject { exprs: [$1], expr_alias: [ ] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, depth: 1 } = $2) }
                  LogicalScan { table: t2, columns: [_row_id#0, x, y] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0, $1], expr_alias: [x, y] }
      LogicalFilter { predicate: ($0 > (1.5:Decimal * $2)) }
        LogicalProject { exprs: [$1, $2, $3], expr_alias: [ ,  ,  ] }
          LogicalAgg { group_keys: [0, 1, 2], agg_calls: [min($3)] }
            LogicalProject { exprs: [$0, $1, $2, $3], expr_alias: [ ,  ,  ,  ] }
              LogicalJoin { type: LeftOuter, on: ($2 = $4) }
                LogicalScan { table: t1, columns: [_row_id#0, x, y] }
                LogicalScan { table: t2, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select count(*) from t2 where t1.y = t2.y);
  logical_plan: |
    LogicalProject { exprs: [$1, $2], expr_alias: [x, y] }
      LogicalFilter { predicate: ($1 > $3) }
        LogicalApply { type: LeftOuter, on: always }
          LogicalScan { table: t1, columns: [_row_id#0, x, y] }
          LogicalProject { exprs: [$0], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [count] }
              LogicalProject { exprs: [], expr_alias: [] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, depth: 1 } = $2) }
                  LogicalScan { table: t2, columns: [_row_id#0, x, y] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0, $1], expr_alias: [x, y] }
      LogicalFilter { predicate: ($0 > $2) }
        LogicalProject { exprs: [$1, $2, $3], expr_alias: [ ,  ,  ] }
          LogicalAgg { group_keys: [0, 1, 2], agg_calls: [count($3)] }
            LogicalProject { exprs: [$0, $1, $2, $3], expr_alias: [ ,  ,  ,  ] }
              LogicalJoin { type: LeftOuter, on: ($2 = $4) }
                LogicalScan { table: t1, columns: [_row_id#0, x, y] }
                LogicalProject { exprs: [1:Int32, $0], expr_alias: [1,  ] }
                  LogicalScan { table: t2, columns: [y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select count(*) + count(*) from t2 where t1.y = t2.y);
  logical_plan: |
    LogicalProject { exprs: [$1, $2], expr_alias: [x, y] }
      LogicalFilter { predicate: ($1 > $3) }
        LogicalApply { type: LeftOuter, on: always }
          LogicalScan { table: t1, columns: [_row_id#0, x, y] }
          LogicalProject { exprs: [($0 + $1)], expr_alias: [ ] }
            LogicalAgg { group_keys: [], agg_calls: [count, count] }
              LogicalProject { exprs: [], expr_alias: [] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, depth: 1 } = $2) }
                  LogicalScan { table: t2, columns: [_row_id#0, x, y] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0, $1], expr_alias: [x, y] }
      LogicalFilter { predicate: ($0 > ($2 + $3)) }
        LogicalProject { exprs: [$1, $2, $3, $4], expr_alias: [ ,  ,  ,  ] }
          LogicalAgg { group_keys: [0, 1, 2], agg_calls: [count($3), count($3)] }
            LogicalProject { exprs: [$0, $1, $2, $3], expr_alias: [ ,  ,  ,  ] }
              LogicalJoin { type: LeftOuter, on: ($2 = $4) }
                LogicalScan { table: t1, columns: [_row_id#0, x, y] }
                LogicalProject { exprs: [1:Int32, $0], expr_alias: [1,  ] }
                  LogicalScan { table: t2, columns: [y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y from t2 where t1.x = t2.x);
  logical_plan: |
    LogicalProject { exprs: [$1], expr_alias: [x] }
      LogicalApply { type: LeftSemi, on: ($2 = $3) }
        LogicalScan { table: t1, columns: [_row_id#0, x, y] }
        LogicalProject { exprs: [$2], expr_alias: [y] }
          LogicalFilter { predicate: (CorrelatedInputRef { index: 1, depth: 1 } = $1) }
            LogicalScan { table: t2, columns: [_row_id#0, x, y] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0], expr_alias: [x] }
      LogicalJoin { type: LeftSemi, on: ($1 = $2) AND ($0 = $3) }
        LogicalScan { table: t1, columns: [x, y] }
        LogicalProject { exprs: [$1, $0], expr_alias: [y,  ] }
          LogicalScan { table: t2, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y not in (select y from t2 where t1.x = t2.x);
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y from t2 where t1.x + t2.x = 100 and t1.y = 1000);
  logical_plan: |
    LogicalProject { exprs: [$1], expr_alias: [x] }
      LogicalApply { type: LeftSemi, on: ($2 = $3) }
        LogicalScan { table: t1, columns: [_row_id#0, x, y] }
        LogicalProject { exprs: [$2], expr_alias: [y] }
          LogicalFilter { predicate: ((CorrelatedInputRef { index: 1, depth: 1 } + $1) = 100:Int32) AND (CorrelatedInputRef { index: 2, depth: 1 } = 1000:Int32) }
            LogicalScan { table: t2, columns: [_row_id#0, x, y] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0], expr_alias: [x] }
      LogicalJoin { type: LeftSemi, on: ($1 = $2) AND (($0 + $3) = 100:Int32) AND ($1 = 1000:Int32) }
        LogicalScan { table: t1, columns: [x, y] }
        LogicalProject { exprs: [$1, $0], expr_alias: [y,  ] }
          LogicalScan { table: t2, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y from t2 where t1.x > t2.x + 1000);
  logical_plan: |
    LogicalProject { exprs: [$1], expr_alias: [x] }
      LogicalApply { type: LeftSemi, on: ($2 = $3) }
        LogicalScan { table: t1, columns: [_row_id#0, x, y] }
        LogicalProject { exprs: [$2], expr_alias: [y] }
          LogicalFilter { predicate: (CorrelatedInputRef { index: 1, depth: 1 } > ($1 + 1000:Int32)) }
            LogicalScan { table: t2, columns: [_row_id#0, x, y] }
  optimized_logical_plan: |
    LogicalProject { exprs: [$0], expr_alias: [x] }
      LogicalJoin { type: LeftSemi, on: ($1 = $2) AND ($0 > ($3 + 1000:Int32)) }
        LogicalScan { table: t1, columns: [x, y] }
        LogicalProject { exprs: [$1, $0], expr_alias: [y,  ] }
          LogicalScan { table: t2, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y, x from t2 where t1.x > t2.x + 1000);
  binder_error: 'Bind error: subquery must return only one column'
