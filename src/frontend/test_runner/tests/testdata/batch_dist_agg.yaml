# This file is automatically generated. See `src/frontend/test_runner/README.md` for more information.
- id: create_tables
  sql: |
    /* T: UpstreamHash(row_id); Tk: UpstreamHash(k); S: single distribution */
    create table T  (k int, v int, o int);
    create index Tk on T(k) include(k, v, o);
    create materialized view S as select * from T order by o limit 100;
- id: agg_on_single
  before:
  - create_tables
  sql: |
    select max(v) as a1 from S;
  batch_local_plan: |
    BatchProject { exprs: [t.v1, (min(t.v2) + (max(t.v3) * count(t.v1)))] }
      BatchHashAgg { group_key: [t.v1], aggs: [min(t.v2), max(t.v3), count(t.v1)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [t.v1, t.v2, t.v3], distribution: SomeShard }
  batch_plan: |
    BatchSimpleAgg { aggs: [max(max(s.v))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [max(s.v)] }
          BatchScan { table: s, columns: [s.v], distribution: UpstreamHashShard() }
- id: extreme_on_T
  before:
  - create_tables
  sql: |
    select max(v) as a1 from T;
  batch_local_plan: |
    BatchProject { exprs: [t.v1, (min(t.v2) + (max(t.v3) * count(t.v1)))] }
      BatchHashAgg { group_key: [t.v1], aggs: [min(t.v2), max(t.v3), count(t.v1)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [t.v1, t.v2, t.v3], distribution: SomeShard }
  batch_plan: |
    BatchSimpleAgg { aggs: [max(max(s.v))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [max(s.v)] }
          BatchScan { table: s, columns: [s.v], distribution: UpstreamHashShard() }- id: extreme_on_AO
- id: sum_on_T
  before:
  - create_tables
  sql: |
    select sum(v) as a1 from T;
  batch_local_plan: |
    BatchProject { exprs: [t.v1, (min(t.v2) + (max(t.v3) * count(t.v1)))] }
      BatchHashAgg { group_key: [t.v1], aggs: [min(t.v2), max(t.v3), count(t.v1)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [t.v1, t.v2, t.v3], distribution: SomeShard }
  batch_plan: |
    BatchSimpleAgg { aggs: [max(max(s.v))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [max(s.v)] }
          BatchScan { table: s, columns: [s.v], distribution: UpstreamHashShard() }- id: extreme_on_AO
- id: cnt_on_T
  before:
  - create_tables
  sql: |
    select count(v) as a1 from T;
  batch_local_plan: |
    BatchProject { exprs: [t.v1, (min(t.v2) + (max(t.v3) * count(t.v1)))] }
      BatchHashAgg { group_key: [t.v1], aggs: [min(t.v2), max(t.v3), count(t.v1)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [t.v1, t.v2, t.v3], distribution: SomeShard }
  batch_plan: |
    BatchSimpleAgg { aggs: [max(max(s.v))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [max(s.v)] }
          BatchScan { table: s, columns: [s.v], distribution: UpstreamHashShard() }- id: extreme_on_AO
- id: string_agg_on_T
  before:
  - create_tables
  sql: |
    select string_agg(v, ',' order by o) as a1 from T;
  batch_local_plan: |
    BatchProject { exprs: [t.v1, (min(t.v2) + (max(t.v3) * count(t.v1)))] }
      BatchHashAgg { group_key: [t.v1], aggs: [min(t.v2), max(t.v3), count(t.v1)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [t.v1, t.v2, t.v3], distribution: SomeShard }
  batch_plan: |
    BatchSimpleAgg { aggs: [max(max(s.v))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [max(s.v)] }
          BatchScan { table: s, columns: [s.v], distribution: UpstreamHashShard() }- id: extreme_on_AO
- id: extreme_count_on_T
  before:
  - create_tables
  sql: |
    select max(v) as a1, count(v) as a2 from T;
  batch_local_plan: |
    BatchProject { exprs: [t.v1, (min(t.v2) + (max(t.v3) * count(t.v1)))] }
      BatchHashAgg { group_key: [t.v1], aggs: [min(t.v2), max(t.v3), count(t.v1)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [t.v1, t.v2, t.v3], distribution: SomeShard }
  batch_plan: |
    BatchSimpleAgg { aggs: [max(max(s.v))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [max(s.v)] }
          BatchScan { table: s, columns: [s.v], distribution: UpstreamHashShard() }- id: extreme_on_AO
- id: count_string_agg_on_T
  before:
  - create_tables
  sql: |
    select count(v) as a1, string_agg(v, ',' order by o) as a2 from T;
  batch_local_plan: |
    BatchProject { exprs: [t.v1, (min(t.v2) + (max(t.v3) * count(t.v1)))] }
      BatchHashAgg { group_key: [t.v1], aggs: [min(t.v2), max(t.v3), count(t.v1)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [t.v1, t.v2, t.v3], distribution: SomeShard }
  batch_plan: |
    BatchSimpleAgg { aggs: [max(max(s.v))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [max(s.v)] }
          BatchScan { table: s, columns: [s.v], distribution: UpstreamHashShard() }- id: extreme_on_AO
- id: extreme_string_agg_on_T
  before:
  - create_tables
  sql: |
    select max(v) as a1, string_agg(v, ',' order by o) as a2 from T;
  batch_local_plan: |
    BatchProject { exprs: [t.v1, (min(t.v2) + (max(t.v3) * count(t.v1)))] }
      BatchHashAgg { group_key: [t.v1], aggs: [min(t.v2), max(t.v3), count(t.v1)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [t.v1, t.v2, t.v3], distribution: SomeShard }
  batch_plan: |
    BatchSimpleAgg { aggs: [max(max(s.v))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [max(s.v)] }
          BatchScan { table: s, columns: [s.v], distribution: UpstreamHashShard() }- id: extreme_on_AO
- id: extreme_on_T_by_k
  before:
  - create_tables
  sql: |
    select max(v) as a1 from T group by k;
  batch_local_plan: |
    BatchProject { exprs: [t.v1, (min(t.v2) + (max(t.v3) * count(t.v1)))] }
      BatchHashAgg { group_key: [t.v1], aggs: [min(t.v2), max(t.v3), count(t.v1)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [t.v1, t.v2, t.v3], distribution: SomeShard }
  batch_plan: |
    BatchSimpleAgg { aggs: [max(max(s.v))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [max(s.v)] }
          BatchScan { table: s, columns: [s.v], distribution: UpstreamHashShard() }- id: extreme_on_AO
- id: extreme_on_Tk_by_k
  before:
  - create_tables
  sql: |
    select max(v) as a1 from Tk group by k;
  batch_local_plan: |
    BatchProject { exprs: [t.v1, (min(t.v2) + (max(t.v3) * count(t.v1)))] }
      BatchHashAgg { group_key: [t.v1], aggs: [min(t.v2), max(t.v3), count(t.v1)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [t.v1, t.v2, t.v3], distribution: SomeShard }
  batch_plan: |
    BatchSimpleAgg { aggs: [max(max(s.v))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [max(s.v)] }
          BatchScan { table: s, columns: [s.v], distribution: UpstreamHashShard() }- id: extreme_on_AO
- id: extreme_on_S_by_k
  before:
  - create_tables
  sql: |
    select max(v) as a1 from S group by k;
  batch_local_plan: |
    BatchProject { exprs: [t.v1, (min(t.v2) + (max(t.v3) * count(t.v1)))] }
      BatchHashAgg { group_key: [t.v1], aggs: [min(t.v2), max(t.v3), count(t.v1)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [t.v1, t.v2, t.v3], distribution: SomeShard }
  batch_plan: |
    BatchSimpleAgg { aggs: [max(max(s.v))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [max(s.v)] }
          BatchScan { table: s, columns: [s.v], distribution: UpstreamHashShard() }- id: extreme_on_AO
