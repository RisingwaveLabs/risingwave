# This file is automatically generated. See `src/frontend/test_runner/README.md` for more information.
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create index idx1 on t1(a, b) include(c);
    select * from t1 where a = 1
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchScan { table: idx1, columns: [idx1.a, idx1.b, idx1.c], scan_ranges: [idx1.a = Int32(1)], distribution: SomeShard }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create index idx1 on t1(a, b) include(c);
    select * from t1 where a = 1 or a = 2
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchFilter { predicate: ((idx1.a = 1:Int32) OR (idx1.a = 2:Int32)) }
        BatchScan { table: idx1, columns: [idx1.a, idx1.b, idx1.c], distribution: SomeShard }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create index idx1 on t1(a, b) include(c);
    select * from t1 where a in (1,2,3)
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchScan { table: idx1, columns: [idx1.a, idx1.b, idx1.c], scan_ranges: [idx1.a = Int32(1) OR idx1.a = Int32(2) OR idx1.a = Int32(3)], distribution: SomeShard }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create index idx1 on t1(a, b) include(c);
    select * from t1 where a between 1 and 8
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchScan { table: idx1, columns: [idx1.a, idx1.b, idx1.c], scan_ranges: [idx1.a >= Int32(1) AND idx1.a <= Int32(8)], distribution: SomeShard }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create index idx1 on t1(a, b) include(c);
    select * from t1 where a = 1 and b = 1
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchScan { table: idx1, columns: [idx1.a, idx1.b, idx1.c], scan_ranges: [idx1.a = Int32(1), idx1.b = Decimal(Normalized(1))], distribution: SomeShard }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create index idx1 on t1(a, b) include(c);
    create index idx2 on t1(b, a) include(c);
    select * from t1 where b = 1
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchScan { table: idx2, columns: [idx2.a, idx2.b, idx2.c], scan_ranges: [idx2.b = Decimal(Normalized(1))], distribution: SomeShard }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create index idx1 on t1(a, b);
    create index idx2 on t1(b, a);
    /* non-covering */
    select * from t1 where b = 1
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchFilter { predicate: (t1.b = 1:Int32) }
        BatchScan { table: t1, columns: [t1.a, t1.b, t1.c], distribution: SomeShard }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create index idx1 on t1(a, b) include(c);
    create index idx2 on t1(b, a) include(c);
    /* non-covering */
    select * from t1 where c = 1
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchFilter { predicate: (t1.c = 1:Int32) }
        BatchScan { table: t1, columns: [t1.a, t1.b, t1.c], distribution: SomeShard }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create index idx1 on t1(a, b) include(c);
    select a,b from t1 where a in (1,2) and b in (2,3)
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchFilter { predicate: In(idx1.b, 2:Int32::Decimal, 3:Int32::Decimal) }
        BatchScan { table: idx1, columns: [idx1.a, idx1.b], scan_ranges: [idx1.a = Int32(1) OR idx1.a = Int32(2)], distribution: SomeShard }
- sql: |
    create table t1 (a int, b numeric, c bigint);
    create index idx1 on t1(a, b) include(c);
    create index idx2 on t1(a);
    select count(1) from t1;
  batch_plan: |
    BatchSimpleAgg { aggs: [sum(count(1:Int32))] }
      BatchExchange { order: [], dist: Single }
        BatchSimpleAgg { aggs: [count(1:Int32)] }
          BatchProject { exprs: [1:Int32] }
            BatchScan { table: idx2, columns: [], distribution: SomeShard }
