# This file is automatically generated. See `src/frontend/test_runner/README.md` for more information.
- sql: |
    create table t1 (v1 int, v2 int);
    with cte as (select v1, v2 from t1) select v1 from cte;
  logical_plan: |
    LogicalProject { exprs: [t1.v1] }
      LogicalProject { exprs: [t1.v1, t1.v2] }
        LogicalScan { table: t1, columns: [t1._row_id, t1.v1, t1.v2] }
  stream_plan: |
    StreamMaterialize { columns: [v1, t1._row_id(hidden)], pk_columns: [t1._row_id] }
      StreamTableScan { table: t1, columns: [t1.v1, t1._row_id], pk: [t1._row_id], distribution: HashShard(t1._row_id) }
- sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v3 int, v4 int);
    with cte as (select v1 from t1) select * from t2 inner join cte on t2.v3 = cte.v1;
  logical_plan: |
    LogicalProject { exprs: [t2.v3, t2.v4, t1.v1] }
      LogicalJoin { type: Inner, on: (t2.v3 = t1.v1), output: all }
        LogicalScan { table: t2, columns: [t2._row_id, t2.v3, t2.v4] }
        LogicalProject { exprs: [t1.v1] }
          LogicalScan { table: t1, columns: [t1._row_id, t1.v1, t1.v2] }
  stream_plan: |
    StreamMaterialize { columns: [v3, v4, v1, t2._row_id(hidden), t1._row_id(hidden)], pk_columns: [t2._row_id, t1._row_id] }
      StreamExchange { dist: HashShard(t2._row_id, t1._row_id) }
        StreamHashJoin { type: Inner, predicate: t2.v3 = t1.v1, output: [t2.v3, t2.v4, t1.v1, t2._row_id, t1._row_id] }
          StreamExchange { dist: HashShard(t2.v3) }
            StreamTableScan { table: t2, columns: [t2.v3, t2.v4, t2._row_id], pk: [t2._row_id], distribution: HashShard(t2._row_id) }
          StreamExchange { dist: HashShard(t1.v1) }
            StreamTableScan { table: t1, columns: [t1.v1, t1._row_id], pk: [t1._row_id], distribution: HashShard(t1._row_id) }
- sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v3 int, v4 int);
    with cte as (select v1, v2 from t1), cte2 as (select v1 from cte) select * from cte2;
  logical_plan: |
    LogicalProject { exprs: [t1.v1] }
      LogicalProject { exprs: [t1.v1] }
        LogicalProject { exprs: [t1.v1, t1.v2] }
          LogicalScan { table: t1, columns: [t1._row_id, t1.v1, t1.v2] }
  stream_plan: |
    StreamMaterialize { columns: [v1, t1._row_id(hidden)], pk_columns: [t1._row_id] }
      StreamTableScan { table: t1, columns: [t1.v1, t1._row_id], pk: [t1._row_id], distribution: HashShard(t1._row_id) }
- sql: |
    create table t1 (x int);
    with with_0 as (select * from t1 group by x having EXISTS(select 0.1)) select * from with_0;
  logical_plan: |
    LogicalProject { exprs: [t1.x] }
      LogicalProject { exprs: [t1.x] }
        LogicalJoin { type: LeftSemi, on: true, output: all }
          LogicalAgg { group_key: [t1.x], aggs: [] }
            LogicalProject { exprs: [t1.x] }
              LogicalScan { table: t1, columns: [t1._row_id, t1.x] }
          LogicalProject { exprs: [0.1:Decimal] }
            LogicalValues { rows: [[]], schema: Schema { fields: [] } }
