- sql: values (11, 22), (33+(1+2), 44);
  batch_plan: |
    BatchValues { rows: [[11:Int32, 22:Int32], [(33:Int32 + (1:Int32 + 2:Int32)), 44:Int32]] }
- sql: select * from t
  binder_error: 'Catalog error: table or source not found: t'
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from t;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchScan { table: t, columns: [v1, v2] }
  stream_plan: |
    StreamMaterialize { columns: [v1, v2, _row_id#0(hidden)], pk_columns: [_row_id#0] }
      StreamTableScan { table: t, columns: [v1, v2, _row_id#0], pk_indices: [2] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select t2.* from t;
  binder_error: 'Item not found: relation "t2"'
- sql: |
    create table t (v1 bigint, v2 double precision);
    select a from t as t2(a);
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [$0], expr_alias: [a] }
        BatchScan { table: t, columns: [v1] }
- sql: |
    create table t ();
    select * from t where 1>2 and 1=1 and 3<1 and 4<>1 or 1=1 and 2>=1 and 1<=2;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchFilter { predicate: (((((1:Int32 > 2:Int32) AND (1:Int32 = 1:Int32)) AND (3:Int32 < 1:Int32)) AND (4:Int32 <> 1:Int32)) OR (((1:Int32 = 1:Int32) AND (2:Int32 >= 1:Int32)) AND (1:Int32 <= 2:Int32))) }
        BatchScan { table: t, columns: [] }
  stream_plan: |
    StreamMaterialize { columns: [_row_id#0(hidden)], pk_columns: [_row_id#0] }
      StreamFilter { predicate: (((((1:Int32 > 2:Int32) AND (1:Int32 = 1:Int32)) AND (3:Int32 < 1:Int32)) AND (4:Int32 <> 1:Int32)) OR (((1:Int32 = 1:Int32) AND (2:Int32 >= 1:Int32)) AND (1:Int32 <= 2:Int32))) }
        StreamTableScan { table: t, columns: [_row_id#0], pk_indices: [0] }
- sql: |
    create table t (v1 int);
    select * from t where v1<1;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchFilter { predicate: ($0 < 1:Int32) }
        BatchScan { table: t, columns: [v1] }
  stream_plan: |
    StreamMaterialize { columns: [v1, _row_id#0(hidden)], pk_columns: [_row_id#0] }
      StreamFilter { predicate: ($0 < 1:Int32) }
        StreamTableScan { table: t, columns: [v1, _row_id#0], pk_indices: [1] }
- sql: |
    create table t ();
    select (((((false is not true) is true) is not false) is false) is not null) is null from t;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [IsNull(IsNotNull(IsFalse(IsNotFalse(IsTrue(IsNotTrue(false:Boolean))))))], expr_alias: [ ] }
        BatchScan { table: t, columns: [] }
- sql: |
    select +1.0, -2.0;
  batch_plan: |
    BatchProject { exprs: [1.0:Decimal, Neg(2.0:Decimal)], expr_alias: [ ,  ] }
      BatchValues { rows: [[]] }
- sql: |
    values(round(42.4382, 2));
  batch_plan: |
    BatchValues { rows: [[RoundDigit(42.4382:Decimal, 2:Int32)]] }
- sql: |
    values(round(42.4382));
  batch_plan: |
    BatchValues { rows: [[RoundDigit(42.4382:Decimal, 0:Int32)]] }
- sql: |
    values(round('abc'));
  binder_error: 'Feature is not yet implemented: function round(Varchar) doesn''t exist'
- sql: |
    values('Postgres' not like 'Post%');
  batch_plan: |
    BatchValues { rows: [[Not(Like('Postgres':Varchar, 'Post%':Varchar))]] }
- sql: |
    values(1 not like 1.23);
  binder_error: 'Feature is not yet implemented: Int32 NotLike Decimal'
- sql: |
    values(extract(hour from timestamp '2001-02-16 20:38:40'));
  batch_plan: |
    BatchValues { rows: [[Extract('HOUR':Varchar, '2001-02-16 20:38:40':Varchar::Timestamp)]] }
- sql: |
    create table t (v1 int);
    select (case when v1=1 then 1 when v1=2 then 2 else 0.0 end) from t;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [Case(($0 = 1:Int32), 1:Int32::Decimal, ($0 = 2:Int32), 2:Int32::Decimal, 0.0:Decimal)], expr_alias: [ ] }
        BatchScan { table: t, columns: [v1] }
  stream_plan: |
    StreamMaterialize { columns: [expr#0, _row_id#0(hidden)], pk_columns: [_row_id#0] }
      StreamProject { exprs: [Case(($0 = 1:Int32), 1:Int32::Decimal, ($0 = 2:Int32), 2:Int32::Decimal, 0.0:Decimal), $1], expr_alias: [ ,  ] }
        StreamTableScan { table: t, columns: [v1, _row_id#0], pk_indices: [1] }
- sql: |
    select length(trim(trailing '1' from '12'))+length(trim(leading '2' from '23'))+length(trim(both '3' from '34'));
  batch_plan: |
    BatchProject { exprs: [((Length(Rtrim('12':Varchar, '1':Varchar)) + Length(Ltrim('23':Varchar, '2':Varchar))) + Length(Trim('34':Varchar, '3':Varchar)))], expr_alias: [ ] }
      BatchValues { rows: [[]] }
- sql: |
    select position(replace('1','1','2'),'123') where '12' like '%1';
  batch_plan: |
    BatchProject { exprs: [Position(Replace('1':Varchar, '1':Varchar, '2':Varchar), '123':Varchar)], expr_alias: [ ] }
      BatchFilter { predicate: Like('12':Varchar, '%1':Varchar) }
        BatchValues { rows: [[]] }
- sql: |
    create table t (v1 int, v2 int);
    insert into t values (22, 33), (44, 55);
  batch_plan: |
    BatchInsert { table: t }
      BatchValues { rows: [[22:Int32, 33:Int32], [44:Int32, 55:Int32]] }
- sql: |
    create table t (v1 real, v2 int);
    insert into t values (22.33, '33'), (44, 55.0);
  batch_plan: |
    BatchInsert { table: t }
      BatchValues { rows: [[22.33:Decimal::Float32, '33':Varchar::Int32], [44:Int32::Float32, 55.0:Decimal::Int32]] }
- sql: |
    create table t (v1 real, v2 int, v3 varchar);
    insert into t values (1, 2), (3, 4);
  binder_error: 'Invalid input syntax: values length mismatched: expected 3, given 2'
- sql: |
    create table t(v1 int);
    insert into t values(NULL);
  batch_plan: |
    BatchInsert { table: t }
      BatchValues { rows: [[null:Int32]] }
- sql: |
    create table t (v1 int, v2 int);
    delete from t where v1 = 1;
  batch_plan: |
    BatchDelete { table: t }
      BatchFilter { predicate: ($1 = 1:Int32) }
        BatchScan { table: t, columns: [_row_id#0, v1, v2] }
- sql: |
    create table t (v1 real not null);
    select v1, count(*) from t group by v1;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchHashAgg { group_keys: [$0], aggs: [count] }
        BatchExchange { order: [], dist: HashShard([0]) }
          BatchScan { table: t, columns: [v1] }
- sql: |
    create table t (v1 real not null);
    select count(*) from t;
  batch_plan: |
    BatchSimpleAgg { aggs: [count] }
      BatchExchange { order: [], dist: Single }
        BatchScan { table: t, columns: [] }
