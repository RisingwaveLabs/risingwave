- sql: |
    create table t (v1 int, v2 int);
    delete from t;
  batch_plan: |
    BatchDelete { table: t }
      BatchScan { table: t, columns: [_row_id#0, v1, v2] }
- sql: |
    create table t (v1 int, v2 int);
    select v1 from t;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchScan { table: t, columns: [v1] }
  stream_plan: |
    StreamMaterialize { columns: [v1, _row_id#0(hidden)], pk_columns: [_row_id#0] }
      StreamTableScan { table: t, columns: [v1, _row_id#0], pk_indices: [1] }
- sql: |
    values(cast(1 as bigint));
  batch_plan: |
    BatchValues { rows: [[1:Int32::Int64]] }
- sql: |
    values(not true);
  batch_plan: |
    BatchValues { rows: [[Not(true:Boolean)]] }
- sql: |
    values(must_be_unimplemented_func(1));
  binder_error: 'Feature is not yet implemented: unsupported function: "must_be_unimplemented_func", Tracking issue: https://github.com/singularity-data/risingwave/issues/112'
- sql: |
    values(sum(1));
  binder_error: 'Invalid input syntax: aggregate functions are not allowed in VALUES'
- sql: |
    values(count(1));
  binder_error: 'Invalid input syntax: aggregate functions are not allowed in VALUES'
- sql: |
    values(min(1));
  binder_error: 'Invalid input syntax: aggregate functions are not allowed in VALUES'
- sql: |
    values(1 + max(1));
  binder_error: 'Invalid input syntax: aggregate functions are not allowed in VALUES'
- sql: |
    create table t (v1 int);
    select v1 from t where min(v1);
  binder_error: 'Invalid input syntax: aggregate functions are not allowed in WHERE'
- sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v2 int);
    create table t3 (v1 int, v2 int);
    select t1.v1 as t1_v1, t1.v2 as t1_v2, t2.v1 as t2_v1, t2.v2 as t2_v2, t3.v1 as t3_v1, t3.v2 as t3_v2 from t1 join t2 on (t1.v1 = t2.v1) join t3 on (t2.v2 = t3.v2);
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [$0, $1, $2, $3, $4, $5], expr_alias: [t1_v1, t1_v2, t2_v1, t2_v2, t3_v1, t3_v2] }
        BatchHashJoin { type: Inner, predicate: $3 = $5 }
          BatchExchange { order: [], dist: HashShard([3]) }
            BatchHashJoin { type: Inner, predicate: $0 = $2 }
              BatchExchange { order: [], dist: HashShard([0]) }
                BatchScan { table: t1, columns: [v1, v2] }
              BatchExchange { order: [], dist: HashShard([0]) }
                BatchScan { table: t2, columns: [v1, v2] }
          BatchExchange { order: [], dist: HashShard([1]) }
            BatchScan { table: t3, columns: [v1, v2] }
  stream_plan: |
    StreamMaterialize { columns: [t1_v1, t1_v2, t2_v1, t2_v2, t3_v1, t3_v2, _row_id#0(hidden), _row_id#1(hidden), _row_id#2(hidden)], pk_columns: [_row_id#0, _row_id#1, _row_id#2] }
      StreamProject { exprs: [$0, $1, $3, $4, $6, $7, $2, $5, $8], expr_alias: [t1_v1, t1_v2, t2_v1, t2_v2, t3_v1, t3_v2,  ,  ,  ] }
        StreamHashJoin { type: Inner, predicate: $4 = $7 }
          StreamExchange { dist: HashShard([4]) }
            StreamHashJoin { type: Inner, predicate: $0 = $3 }
              StreamExchange { dist: HashShard([0]) }
                StreamTableScan { table: t1, columns: [v1, v2, _row_id#0], pk_indices: [2] }
              StreamExchange { dist: HashShard([0]) }
                StreamTableScan { table: t2, columns: [v1, v2, _row_id#0], pk_indices: [2] }
          StreamExchange { dist: HashShard([1]) }
            StreamTableScan { table: t3, columns: [v1, v2, _row_id#0], pk_indices: [2] }
- sql: |
    create table t1 (v1 int not null, v2 int not null);
    create table t2 (v1 int not null, v2 int not null);
    select t1.v2 as t1_v2, t2.v2 as t2_v2 from t1 join t2 on t1.v1 = t2.v1;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [$1, $3], expr_alias: [t1_v2, t2_v2] }
        BatchHashJoin { type: Inner, predicate: $0 = $2 }
          BatchExchange { order: [], dist: HashShard([0]) }
            BatchScan { table: t1, columns: [v1, v2] }
          BatchExchange { order: [], dist: HashShard([0]) }
            BatchScan { table: t2, columns: [v1, v2] }
  stream_plan: |
    StreamMaterialize { columns: [t1_v2, t2_v2, _row_id#0(hidden), _row_id#1(hidden)], pk_columns: [_row_id#0, _row_id#1] }
      StreamProject { exprs: [$1, $4, $2, $5], expr_alias: [t1_v2, t2_v2,  ,  ] }
        StreamHashJoin { type: Inner, predicate: $0 = $3 }
          StreamExchange { dist: HashShard([0]) }
            StreamTableScan { table: t1, columns: [v1, v2, _row_id#0], pk_indices: [2] }
          StreamExchange { dist: HashShard([0]) }
            StreamTableScan { table: t2, columns: [v1, v2, _row_id#0], pk_indices: [2] }
- sql: select 1
  batch_plan: |
    BatchProject { exprs: [1:Int32], expr_alias: [ ] }
      BatchValues { rows: [[]] }
- sql: |
    create table t(v1 int, v2 int, v3 int);
    select v1, min(v2) + max(v3) * count(v1) from t group by v1;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [$0, ($1 + ($2 * $3))], expr_alias: [v1,  ] }
        BatchHashAgg { group_keys: [$0], aggs: [min($1), max($2), count($0)] }
          BatchExchange { order: [], dist: HashShard([0]) }
            BatchScan { table: t, columns: [v1, v2, v3] }
  stream_plan: |
    StreamMaterialize { columns: [v1, expr#1], pk_columns: [v1] }
      StreamProject { exprs: [$0, ($2 + ($3 * $4))], expr_alias: [v1,  ] }
        StreamHashAgg { group_keys: [$0], aggs: [count, min($1), max($2), count($0)] }
          StreamExchange { dist: HashShard([0]) }
            StreamTableScan { table: t, columns: [v1, v2, v3, _row_id#0], pk_indices: [3] }
- sql: |
    create table t(v1 int, v2 int, v3 int);
    select min(v1) + max(v2) * count(v3) from t;
  batch_plan: |
    BatchProject { exprs: [($0 + ($1 * $2))], expr_alias: [ ] }
      BatchSimpleAgg { aggs: [min($0), max($1), count($2)] }
        BatchExchange { order: [], dist: Single }
          BatchScan { table: t, columns: [v1, v2, v3] }
  stream_plan: |
    StreamMaterialize { columns: [expr#0, agg#0(hidden), agg#1(hidden), agg#2(hidden), agg#3(hidden)], pk_columns: [agg#0, agg#1, agg#2, agg#3] }
      StreamProject { exprs: [($1 + ($2 * $3)), $0, $1, $2, $3], expr_alias: [ ,  ,  ,  ,  ] }
        StreamSimpleAgg { aggs: [count, min($0), max($1), count($2)] }
          StreamExchange { dist: Single }
            StreamTableScan { table: t, columns: [v1, v2, v3, _row_id#0], pk_indices: [3] }
- sql: |
    create table t(v1 int, v2 int);
    select v1 from t group by v2;
  planner_error: 'Invalid input syntax: column must appear in the GROUP BY clause or be used in an aggregate function'
- sql: |
    create table t(v1 int, v2 int);
    select sum(v1), v1 from t group by v2, v2;
  planner_error: 'Invalid input syntax: column must appear in the GROUP BY clause or be used in an aggregate function'
- sql: |
    create table t(v1 int, v2 int, v3 int);
    select v3, min(v1) * avg(v1+v2) from t group by v3;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [$0, ($1 * ($2::Decimal / $3))], expr_alias: [v3,  ] }
        BatchHashAgg { group_keys: [$0], aggs: [min($1), sum($2), count($2)] }
          BatchProject { exprs: [$2, $0, ($0 + $1)], expr_alias: [ ,  ,  ] }
            BatchExchange { order: [], dist: HashShard([2]) }
              BatchScan { table: t, columns: [v1, v2, v3] }
  stream_plan: |
    StreamMaterialize { columns: [v3, expr#1], pk_columns: [v3] }
      StreamProject { exprs: [$0, ($2 * ($3::Decimal / $4))], expr_alias: [v3,  ] }
        StreamHashAgg { group_keys: [$0], aggs: [count, min($1), sum($2), count($2)] }
          StreamProject { exprs: [$2, $0, ($0 + $1), $3], expr_alias: [ ,  ,  ,  ] }
            StreamExchange { dist: HashShard([2]) }
              StreamTableScan { table: t, columns: [v1, v2, v3, _row_id#0], pk_indices: [3] }
- sql: |
    create table t(v1 int, v2 int);
    select count(v1 + v2), sum(v1 + v2) from t;
  batch_plan: |
    BatchSimpleAgg { aggs: [count($0), sum($0)] }
      BatchExchange { order: [], dist: Single }
        BatchProject { exprs: [($0 + $1)], expr_alias: [ ] }
          BatchScan { table: t, columns: [v1, v2] }
  stream_plan: |
    StreamMaterialize { columns: [agg#0(hidden), agg#1, agg#2], pk_columns: [agg#0, agg#1, agg#2] }
      StreamSimpleAgg { aggs: [count, count($0), sum($0)] }
        StreamExchange { dist: Single }
          StreamProject { exprs: [($0 + $1), $2], expr_alias: [ ,  ] }
            StreamTableScan { table: t, columns: [v1, v2, _row_id#0], pk_indices: [2] }
- sql: |
    create table t(v1 int, v2 int, v3 int);
    select v1, sum(v2 + v3) / count(v2 + v3) + max(v1) from t group by v1;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [$0, (($1 / $2) + $3)], expr_alias: [v1,  ] }
        BatchHashAgg { group_keys: [$0], aggs: [sum($1), count($1), max($0)] }
          BatchProject { exprs: [$0, ($1 + $2)], expr_alias: [ ,  ] }
            BatchExchange { order: [], dist: HashShard([0]) }
              BatchScan { table: t, columns: [v1, v2, v3] }
  stream_plan: |
    StreamMaterialize { columns: [v1, expr#1], pk_columns: [v1] }
      StreamProject { exprs: [$0, (($2 / $3) + $4)], expr_alias: [v1,  ] }
        StreamHashAgg { group_keys: [$0], aggs: [count, sum($1), count($1), max($0)] }
          StreamProject { exprs: [$0, ($1 + $2), $3], expr_alias: [ ,  ,  ] }
            StreamExchange { dist: HashShard([0]) }
              StreamTableScan { table: t, columns: [v1, v2, v3, _row_id#0], pk_indices: [3] }
