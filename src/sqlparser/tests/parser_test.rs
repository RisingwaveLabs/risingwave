// Copyright 2024 RisingWave Labs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Run parser tests from yaml files in `tests/testdata`.
//!
//! Set `UPDATE_EXPECT=1` to update the yaml files.

#![feature(register_tool)]
#![register_tool(rw)]
#![allow(rw::format_error)]

use std::fmt::Display;

use anyhow::Result;
use expect_test::expect_file;
use libtest_mimic::{Arguments, Failed, Trial};
use risingwave_sqlparser::ast::Statement;
use risingwave_sqlparser::parser::Parser;
use serde::{Deserialize, Serialize};

/// `TestCase` will be deserialized from yaml.
#[serde_with::skip_serializing_none]
#[derive(PartialEq, Eq, Debug, Serialize, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TestCase {
    pub input: String,
    pub formatted_sql: Option<String>,
    pub error_msg: Option<String>,
    pub formatted_ast: Option<String>,
}

impl Display for TestCase {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(&serde_yaml::to_string(self).unwrap())
    }
}

fn run_test_file(file_name: &str) -> Result<()> {
    let file = expect_file![format!("testdata/{file_name}")];

    let cases: Vec<TestCase> = serde_yaml::from_str(&file.data())?;

    let mut new_cases = Vec::with_capacity(cases.len());

    for case in cases {
        let input = &case.input;
        let ast = Parser::parse_sql(input);
        let actual_case = match ast {
            Ok(ast) => {
                let [ast]: [Statement; 1] = ast
                    .try_into()
                    .expect("Only one statement is supported now.");

                let actual_formatted_sql = case.formatted_sql.as_ref().map(|_| format!("{}", ast));
                let actual_formatted_ast =
                    case.formatted_ast.as_ref().map(|_| format!("{:?}", ast));

                TestCase {
                    input: input.clone(),
                    formatted_sql: actual_formatted_sql,
                    formatted_ast: actual_formatted_ast,
                    error_msg: None,
                }
            }
            Err(err) => {
                let actual_error_msg = format!("{}", err);
                TestCase {
                    input: input.clone(),
                    formatted_sql: None,
                    formatted_ast: None,
                    error_msg: Some(actual_error_msg),
                }
            }
        };
        new_cases.push(actual_case);
    }

    let actual = serde_yaml::to_string(&new_cases).unwrap();
    file.assert_eq(&format!(
        "# This file is automatically generated by `src/sqlparser/tests/parser_test.rs`.\n{actual}"
    ));
    Ok(())
}

/// The entry point of `test_runner`.
fn main() {
    let run_tests_args = &Arguments::from_args();
    let mut tests = vec![];

    use walkdir::WalkDir;
    for entry in WalkDir::new("tests/testdata") {
        let entry = entry.unwrap();
        if !(entry.path().is_file()) {
            continue;
        }
        if !(entry
            .path()
            .extension()
            .map_or(false, |p| p.eq_ignore_ascii_case("yaml")))
        {
            continue;
        }
        let file_name = entry.file_name().to_string_lossy().to_string();
        tests.push(Trial::test(file_name.clone(), move || {
            run_test_file(&file_name).map_err(|e| Failed::from(e.to_string()))
        }));
    }

    libtest_mimic::run(run_tests_args, tests).exit();
}
