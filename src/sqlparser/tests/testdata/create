CREATE DATABASE t
---
CREATE DATABASE t
=>
CreateDatabase { db_name: ObjectName([Ident { value: "t", quote_style: None }]), if_not_exists: false, location: None, managed_location: None }

CREATE DATABASE IF NOT EXISTS t
---
CREATE DATABASE IF NOT EXISTS t
=>
CreateDatabase { db_name: ObjectName([Ident { value: "t", quote_style: None }]), if_not_exists: true, location: None, managed_location: None }

CREATE SCHEMA t
---
CREATE SCHEMA t
=>
CreateSchema { schema_name: ObjectName([Ident { value: "t", quote_style: None }]), if_not_exists: false }

CREATE SCHEMA IF NOT EXISTS t
---
CREATE SCHEMA IF NOT EXISTS t
=>
CreateSchema { schema_name: ObjectName([Ident { value: "t", quote_style: None }]), if_not_exists: true }

CREATE OR REPLACE TABLE t (a INT)
---
CREATE OR REPLACE TABLE t (a INT)
=>
CreateTable { or_replace: true, temporary: false, if_not_exists: false, name: ObjectName([Ident { value: "t", quote_style: None }]), columns: [ColumnDef { name: Ident { value: "a", quote_style: None }, data_type: Int(None), collation: None, options: [] }], constraints: [], table_properties: [], with_options: [], query: None, like: None }

CREATE TABLE t (a INT, b INT) AS SELECT 1 AS b, 2 AS a
---
CREATE TABLE t (a INT, b INT) AS SELECT 1 AS b, 2 AS a
=>
CreateTable { or_replace: false, temporary: false, if_not_exists: false, name: ObjectName([Ident { value: "t", quote_style: None }]), columns: [ColumnDef { name: Ident { value: "a", quote_style: None }, data_type: Int(None), collation: None, options: [] }, ColumnDef { name: Ident { value: "b", quote_style: None }, data_type: Int(None), collation: None, options: [] }], constraints: [], table_properties: [], with_options: [], query: Some(Query { with: None, body: Select(Select { distinct: false, projection: [ExprWithAlias { expr: Value(Number("1", false)), alias: Ident { value: "b", quote_style: None } }, ExprWithAlias { expr: Value(Number("2", false)), alias: Ident { value: "a", quote_style: None } }], from: [], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None }), like: None }

CREATE SOURCE
---
sql parser error: Expected identifier, found: EOF

CREATE SOURCE src
---
sql parser error: Expected ROW, found: EOF

CREATE SOURCE src ROW FORMAT JSON
---
CREATE SOURCE src ROW FORMAT JSON
=>
CreateSource { is_materialized: false, stmt: CreateSourceStatement { if_not_exists: false, columns: [], constraints: [], source_name: ObjectName([Ident { value: "src", quote_style: None }]), with_properties: WithProperties([]), source_schema: Json } }

CREATE SOURCE IF NOT EXISTS src WITH ('kafka.topic' = 'abc', 'kafka.servers' = 'localhost:1001') ROW FORMAT PROTOBUF MESSAGE 'Foo' ROW SCHEMA LOCATION 'file://'
---
CREATE SOURCE IF NOT EXISTS src WITH ('kafka.topic' = 'abc', 'kafka.servers' = 'localhost:1001') ROW FORMAT PROTOBUF MESSAGE 'Foo' ROW SCHEMA LOCATION 'file://'
=>
CreateSource { is_materialized: false, stmt: CreateSourceStatement { if_not_exists: true, columns: [], constraints: [], source_name: ObjectName([Ident { value: "src", quote_style: None }]), with_properties: WithProperties([SqlOption { name: Ident { value: "kafka.topic", quote_style: Some('\'') }, value: SingleQuotedString("abc") }, SqlOption { name: Ident { value: "kafka.servers", quote_style: Some('\'') }, value: SingleQuotedString("localhost:1001") }]), source_schema: Protobuf(ProtobufSchema { message_name: AstString("Foo"), row_schema_location: AstString("file://") }) } }

CREATE TABLE T (v1 INT, v2 STRUCT<v1 INT, v2 INT>)
---
CREATE TABLE T (v1 INT, v2 STRUCT<v1 INT, v2 INT>)
=>
CreateTable { or_replace: false, temporary: false, if_not_exists: false, name: ObjectName([Ident { value: "T", quote_style: None }]), columns: [ColumnDef { name: Ident { value: "v1", quote_style: None }, data_type: Int(None), collation: None, options: [] }, ColumnDef { name: Ident { value: "v2", quote_style: None }, data_type: Struct([StructField { name: Ident { value: "v1", quote_style: None }, data_type: Int(None) }, StructField { name: Ident { value: "v2", quote_style: None }, data_type: Int(None) }]), collation: None, options: [] }], constraints: [], table_properties: [], with_options: [], query: None, like: None }

CREATE TABLE T (v1 INT, v2 STRUCT<v1 INT, v2 INT, v3 STRUCT<v1 INT, v2 INT>>)
---
CREATE TABLE T (v1 INT, v2 STRUCT<v1 INT, v2 INT, v3 STRUCT<v1 INT, v2 INT>>)
=>
CreateTable { or_replace: false, temporary: false, if_not_exists: false, name: ObjectName([Ident { value: "T", quote_style: None }]), columns: [ColumnDef { name: Ident { value: "v1", quote_style: None }, data_type: Int(None), collation: None, options: [] }, ColumnDef { name: Ident { value: "v2", quote_style: None }, data_type: Struct([StructField { name: Ident { value: "v1", quote_style: None }, data_type: Int(None) }, StructField { name: Ident { value: "v2", quote_style: None }, data_type: Int(None) }, StructField { name: Ident { value: "v3", quote_style: None }, data_type: Struct([StructField { name: Ident { value: "v1", quote_style: None }, data_type: Int(None) }, StructField { name: Ident { value: "v2", quote_style: None }, data_type: Int(None) }]) }]), collation: None, options: [] }], constraints: [], table_properties: [], with_options: [], query: None, like: None }

CREATE TABLE T (a STRUCT<v1 INT>)
---
CREATE TABLE T (a STRUCT<v1 INT>)
=>
CreateTable { or_replace: false, temporary: false, if_not_exists: false, name: ObjectName([Ident { value: "T", quote_style: None }]), columns: [ColumnDef { name: Ident { value: "a", quote_style: None }, data_type: Struct([StructField { name: Ident { value: "v1", quote_style: None }, data_type: Int(None) }]), collation: None, options: [] }], constraints: [], table_properties: [], with_options: [], query: None, like: None }
