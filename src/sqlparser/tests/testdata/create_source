CREATE SOURCE
---
sql parser error: Expected identifier, found: EOF

CREATE SOURCE src
---
sql parser error: Expected ROW, found: EOF

CREATE SOURCE src ROW FORMAT JSON
---
CREATE SOURCE src ROW FORMAT JSON
=>
CreateSource { is_materialized: false, stmt: CreateSourceStatement { if_not_exists: false, columns: [], constraints: [], source_name: ObjectName([Ident { value: "src", quote_style: None }]), with_properties: WithProperties([]), source_schema: Json } }

CREATE SOURCE IF NOT EXISTS src WITH ('kafka.topic' = 'abc', 'kafka.servers' = 'localhost:1001') ROW FORMAT PROTOBUF MESSAGE 'Foo' ROW SCHEMA LOCATION 'file://'
---
CREATE SOURCE IF NOT EXISTS src WITH ('kafka.topic' = 'abc', 'kafka.servers' = 'localhost:1001') ROW FORMAT PROTOBUF MESSAGE 'Foo' ROW SCHEMA LOCATION 'file://'
=>
CreateSource { is_materialized: false, stmt: CreateSourceStatement { if_not_exists: true, columns: [], constraints: [], source_name: ObjectName([Ident { value: "src", quote_style: None }]), with_properties: WithProperties([SqlOption { name: Ident { value: "kafka.topic", quote_style: Some('\'') }, value: SingleQuotedString("abc") }, SqlOption { name: Ident { value: "kafka.servers", quote_style: Some('\'') }, value: SingleQuotedString("localhost:1001") }]), source_schema: Protobuf(ProtobufSchema { message_name: AstString("Foo"), row_schema_location: AstString("file://") }) } }

CREATE MATERIALIZED SOURCE src ROW FORMAT JSON
---
CREATE MATERIALIZED SOURCE src ROW FORMAT JSON
=>
CreateSource { is_materialized: true, stmt: CreateSourceStatement { if_not_exists: false, columns: [], constraints: [], source_name: ObjectName([Ident { value: "src", quote_style: None }]), with_properties: WithProperties([]), source_schema: Json } }
